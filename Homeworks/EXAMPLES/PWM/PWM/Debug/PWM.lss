
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000930  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e5  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000380  00000000  00000000  000012f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040b  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00001b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_12>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
/* GPIO_write_high */

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_write_low>:
  98:	fc 01       	movw	r30, r24
  9a:	90 81       	ld	r25, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_write_low+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_write_low+0xa>
  aa:	20 95       	com	r18
  ac:	29 23       	and	r18, r25
  ae:	20 83       	st	Z, r18
  b0:	08 95       	ret

000000b2 <GPIO_toggle>:
/*--------------------------------------------------------------------*/
/* GPIO_toggle */				// toggle choosen bit

void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  b2:	fc 01       	movw	r30, r24
  b4:	40 81       	ld	r20, Z
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <GPIO_toggle+0xe>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <GPIO_toggle+0xa>
  c4:	24 27       	eor	r18, r20
  c6:	20 83       	st	Z, r18
  c8:	08 95       	ret

000000ca <main>:



int main(void)
{
	GPIO_config_output(&DDRB,LED_D1);
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	84 e2       	ldi	r24, 0x24	; 36
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_low(&PORTB,	LED_D1);
  d4:	62 e0       	ldi	r22, 0x02	; 2
  d6:	85 e2       	ldi	r24, 0x25	; 37
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
	
	TCCR1A |= (1<<COM1B1); TCCR1A &= !(1<<COM1B0);  //noniverting mode
  de:	e0 e8       	ldi	r30, 0x80	; 128
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	80 83       	st	Z, r24
  e8:	80 81       	ld	r24, Z
  ea:	10 82       	st	Z, r1
	
	TCCR1A |= (1<<WGM12	| 1<<WGM11 | 1<<WGM10);  TCCR1A &= !(1 << WGM13);
  ec:	80 81       	ld	r24, Z
  ee:	8b 60       	ori	r24, 0x0B	; 11
  f0:	80 83       	st	Z, r24
  f2:	80 81       	ld	r24, Z
  f4:	10 82       	st	Z, r1
	TCCR1B |= (1<<WGM12	| 1<<WGM11 | 1<<WGM10);  TCCR1B &= !(1 << WGM13);
  f6:	e1 e8       	ldi	r30, 0x81	; 129
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	8b 60       	ori	r24, 0x0B	; 11
  fe:	80 83       	st	Z, r24
 100:	80 81       	ld	r24, Z
 102:	10 82       	st	Z, r1
	TIM1_overflow_33ms();
 104:	80 81       	ld	r24, Z
 106:	8a 7f       	andi	r24, 0xFA	; 250
 108:	80 83       	st	Z, r24
 10a:	80 81       	ld	r24, Z
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	80 83       	st	Z, r24
	OCR1B = 0x01FF;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 118:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	TIMSK1 |= (1 << OCIE1B);
 11c:	ef e6       	ldi	r30, 0x6F	; 111
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	84 60       	ori	r24, 0x04	; 4
 124:	80 83       	st	Z, r24
	
	sei();
 126:	78 94       	sei
 128:	ff cf       	rjmp	.-2      	; 0x128 <main+0x5e>

0000012a <__vector_12>:
    while (1) 
    {
    }
}

ISR(TIMER1_COMPB_vect){
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	GPIO_toggle(&PORTB,LED_D1);
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	85 e2       	ldi	r24, 0x25	; 37
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_toggle>
	if(OCR1B <= 0x3FF){
 156:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 15a:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 15e:	81 15       	cp	r24, r1
 160:	94 40       	sbci	r25, 0x04	; 4
 162:	38 f4       	brcc	.+14     	; 0x172 <__vector_12+0x48>
		OCR1B = OCR1B + 1;
 164:	ea e8       	ldi	r30, 0x8A	; 138
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	91 81       	ldd	r25, Z+1	; 0x01
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	91 83       	std	Z+1, r25	; 0x01
 170:	80 83       	st	Z, r24
	}
	OCR1B = 0x01FF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 17a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
