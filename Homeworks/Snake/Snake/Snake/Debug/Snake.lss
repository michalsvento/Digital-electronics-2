
Snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  00000376  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de1  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000854  00000000  00000000  00001269  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c9  00000000  00000000  00001abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002088  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cc  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/* GPIO_config_input_pullup */
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
	*reg_name++;                    // Change pointer to Data Register
	*reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
/* GPIO_write_low */
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
	*reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/*--------------------------------------------------------------------*/
/* GPIO_write_high */

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Timer/Counter1 overflows.
 */
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(0,0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SEG_update_shift_regs>
	
	/* Configure 8-bit Timer/Counter0
	 * Set prescaler and enable overflow interrupt */
	TIM0_overflow_16ms();
  fc:	85 b5       	in	r24, 0x25	; 37
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	85 bd       	out	0x25, r24	; 37
 102:	85 b5       	in	r24, 0x25	; 37
 104:	85 60       	ori	r24, 0x05	; 5
 106:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 108:	ee e6       	ldi	r30, 0x6E	; 110
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	80 83       	st	Z, r24
	
	/* Configure 16-bit Timer/Counter1
    * Set prescaler and enable overflow interrupt */
	TIM1_overflow_33ms();
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8a 7f       	andi	r24, 0xFA	; 250
 11a:	80 83       	st	Z, r24
 11c:	80 81       	ld	r24, Z
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 122:	ef e6       	ldi	r30, 0x6F	; 111
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
	
    // Enables interrupts by setting the global interrupt mask
	sei();
 12c:	78 94       	sei
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x3e>

00000130 <__vector_13>:
// ISR starts when Timer/Counter1 overflows. Counts the segment & 
* position of SSD  
**/

ISR(TIMER1_OVF_vect)
{	
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	SEG_update_shift_regs(led,pos);
 152:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <__data_end>
 156:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <led>
 15a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SEG_update_shift_regs>
	
	static uint8_t Ndisplays=3;		//Number of displays
	++led;
 15e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <led>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	89 0f       	add	r24, r25
 166:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <led>
	
	if(led<=4)
	{
		if(led==4)			// last segment position 0
 16a:	84 30       	cpi	r24, 0x04	; 4
 16c:	61 f4       	brne	.+24     	; 0x186 <__vector_13+0x56>
		{
			if(pos<(Ndisplays-1))		
 16e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 172:	28 2f       	mov	r18, r24
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	22 30       	cpi	r18, 0x02	; 2
 178:	31 05       	cpc	r19, r1
 17a:	bc f4       	brge	.+46     	; 0x1aa <__vector_13+0x7a>
			{
				pos++;		// move to position 3(last)
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
				led--;		//	SegmentD doesn't move
 182:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <led>
			}
		}
	}
	
	if( (led<=7)  && (led>4 ))
 186:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <led>
 18a:	87 30       	cpi	r24, 0x07	; 7
 18c:	71 f4       	brne	.+28     	; 0x1aa <__vector_13+0x7a>
	{
		
		if(led==7)
		{
			if(pos>0)
 18e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 192:	88 23       	and	r24, r24
 194:	39 f0       	breq	.+14     	; 0x1a4 <__vector_13+0x74>
			{
				pos--;
 196:	81 50       	subi	r24, 0x01	; 1
 198:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
				led--;
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <led>
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <__vector_13+0x7a>
			}
			else
			{
				led=1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <led>
			}
		}
	}

		
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <SEG_init>:
	};
/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 1cc:	64 e0       	ldi	r22, 0x04	; 4
 1ce:	8a e2       	ldi	r24, 0x2A	; 42
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 1d6:	67 e0       	ldi	r22, 0x07	; 7
 1d8:	8a e2       	ldi	r24, 0x2A	; 42
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	84 e2       	ldi	r24, 0x24	; 36
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 1ea:	08 95       	ret

000001ec <SEG_update_shift_regs>:


/*--------------------------------------------------------------------*/
/* SEG_snake */
void SEG_update_shift_regs(uint8_t snake, uint8_t position)
{
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
	uint8_t bit_number;
	snake = snake_value[snake];     // 0, 1, ..., 9
 1f2:	e8 2f       	mov	r30, r24
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	e0 50       	subi	r30, 0x00	; 0
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	10 81       	ld	r17, Z
	position = segment_position[position];  // 0, 1, 2, 3
 1fc:	e6 2f       	mov	r30, r22
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	e9 5f       	subi	r30, 0xF9	; 249
 202:	fe 4f       	sbci	r31, 0xFE	; 254
 204:	d0 81       	ld	r29, Z

	// Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTB,SEGMENT_DATA);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	85 e2       	ldi	r24, 0x25	; 37
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD,SEGMENT_CLK);
 210:	67 e0       	ldi	r22, 0x07	; 7
 212:	8b e2       	ldi	r24, 0x2B	; 43
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
 21a:	64 e0       	ldi	r22, 0x04	; 4
 21c:	8b e2       	ldi	r24, 0x2B	; 43
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	85 e0       	ldi	r24, 0x05	; 5
 226:	8a 95       	dec	r24
 228:	f1 f7       	brne	.-4      	; 0x226 <SEG_update_shift_regs+0x3a>
 22a:	00 00       	nop
 22c:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "segments")
		if ((snake & 1) == 0)
 22e:	10 fd       	sbrc	r17, 0
 230:	06 c0       	rjmp	.+12     	; 0x23e <SEG_update_shift_regs+0x52>
		{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	85 e2       	ldi	r24, 0x25	; 37
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 23c:	05 c0       	rjmp	.+10     	; 0x248 <SEG_update_shift_regs+0x5c>
		}
		else
		{
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	85 e2       	ldi	r24, 0x25	; 37
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <SEG_update_shift_regs+0x5e>
 24e:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 250:	67 e0       	ldi	r22, 0x07	; 7
 252:	8b e2       	ldi	r24, 0x2B	; 43
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <SEG_update_shift_regs+0x70>
 260:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 262:	67 e0       	ldi	r22, 0x07	; 7
 264:	8b e2       	ldi	r24, 0x2B	; 43
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		// Shift "segments"
		snake = snake >> 1;
 26c:	16 95       	lsr	r17
 26e:	c1 50       	subi	r28, 0x01	; 1
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
	// Wait 1 us
	_delay_us(1);
	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 8; bit_number++)
 270:	f1 f6       	brne	.-68     	; 0x22e <SEG_update_shift_regs+0x42>
 272:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop through the 2nd byte (position)
	// p3 p2 p1 p0 . . . . (active high values)
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "position")
		if ((position & 1) == 0)
 274:	d0 fd       	sbrc	r29, 0
 276:	06 c0       	rjmp	.+12     	; 0x284 <SEG_update_shift_regs+0x98>
		{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	85 e2       	ldi	r24, 0x25	; 37
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 282:	05 c0       	rjmp	.+10     	; 0x28e <SEG_update_shift_regs+0xa2>
		}
		else
		{
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	85 e2       	ldi	r24, 0x25	; 37
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 28e:	85 e0       	ldi	r24, 0x05	; 5
 290:	8a 95       	dec	r24
 292:	f1 f7       	brne	.-4      	; 0x290 <SEG_update_shift_regs+0xa4>
 294:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 296:	67 e0       	ldi	r22, 0x07	; 7
 298:	8b e2       	ldi	r24, 0x2B	; 43
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <SEG_update_shift_regs+0xb6>
 2a6:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 2a8:	67 e0       	ldi	r22, 0x07	; 7
 2aa:	8b e2       	ldi	r24, 0x2B	; 43
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		// Shift "position"
		position = position >> 1;
 2b2:	d6 95       	lsr	r29
 2b4:	c1 50       	subi	r28, 0x01	; 1
		snake = snake >> 1;
	}

	// Loop through the 2nd byte (position)
	// p3 p2 p1 p0 . . . . (active high values)
	for (bit_number = 0; bit_number < 8; bit_number++)
 2b6:	f1 f6       	brne	.-68     	; 0x274 <SEG_update_shift_regs+0x88>
		// Shift "position"
		position = position >> 1;
	}

	// Pull LATCH high
	GPIO_write_high(&PORTD,SEGMENT_LATCH);
 2b8:	64 e0       	ldi	r22, 0x04	; 4
 2ba:	8b e2       	ldi	r24, 0x2B	; 43
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2c2:	85 e0       	ldi	r24, 0x05	; 5
 2c4:	8a 95       	dec	r24
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <SEG_update_shift_regs+0xd8>
 2c8:	00 00       	nop
	// Wait 1 us
	_delay_us(1);
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	08 95       	ret

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
