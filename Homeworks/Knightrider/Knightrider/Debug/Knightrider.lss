
Knightrider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074d  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  0000090d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00000f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fe  00000000  00000000  000015fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 */
int main(void)
{
    /* GREEN LED */
    // Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_1) | (1<<LED_2)| (1<<LED_3) | (1<<LED_4) | (1<<LED_5) ;
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8e 63       	ori	r24, 0x3E	; 62
  84:	84 b9       	out	0x04, r24	; 4
    // ...and turn LED off in Data Register
    PORTB = PORTB & ~(1<<LED_1) ;
  86:	29 98       	cbi	0x05, 1	; 5
    // Infinite loop
    while (1)
    {	int i;
        // Pause several milliseconds
		
		PORTB = PORTB ^ (1<<LED_1);
  88:	92 e0       	ldi	r25, 0x02	; 2
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	89 27       	eor	r24, r25
  8e:	85 b9       	out	0x05, r24	; 5
  90:	24 e0       	ldi	r18, 0x04	; 4
  92:	30 e0       	ldi	r19, 0x00	; 0

		for (i=1; i<=4 ; i++)
		{
			PORTB=(PORTB<<1);
  94:	85 b1       	in	r24, 0x05	; 5
  96:	88 0f       	add	r24, r24
  98:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	4f ef       	ldi	r20, 0xFF	; 255
  9c:	54 e3       	ldi	r21, 0x34	; 52
  9e:	8c e0       	ldi	r24, 0x0C	; 12
  a0:	41 50       	subi	r20, 0x01	; 1
  a2:	50 40       	sbci	r21, 0x00	; 0
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2a>
  aa:	00 00       	nop
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	31 09       	sbc	r19, r1
    {	int i;
        // Pause several milliseconds
		
		PORTB = PORTB ^ (1<<LED_1);

		for (i=1; i<=4 ; i++)
  b0:	89 f7       	brne	.-30     	; 0x94 <main+0x14>
  b2:	24 e0       	ldi	r18, 0x04	; 4
  b4:	30 e0       	ldi	r19, 0x00	; 0
			PORTB=(PORTB<<1);
			_delay_ms(BLINK_DELAY);
			}
		for (i=4;i>=1;i--)
		{
			PORTB=(PORTB>>LED_1);
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	86 95       	lsr	r24
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	4f ef       	ldi	r20, 0xFF	; 255
  be:	54 e3       	ldi	r21, 0x34	; 52
  c0:	8c e0       	ldi	r24, 0x0C	; 12
  c2:	41 50       	subi	r20, 0x01	; 1
  c4:	50 40       	sbci	r21, 0x00	; 0
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x42>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x4c>
  cc:	00 00       	nop
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	31 09       	sbc	r19, r1
		for (i=1; i<=4 ; i++)
		{
			PORTB=(PORTB<<1);
			_delay_ms(BLINK_DELAY);
			}
		for (i=4;i>=1;i--)
  d2:	89 f7       	brne	.-30     	; 0xb6 <main+0x36>
		{
			PORTB=(PORTB>>LED_1);
			_delay_ms(BLINK_DELAY);
		}
		
    PORTB = PORTB & ~(1<<LED_1) ;
  d4:	29 98       	cbi	0x05, 1	; 5


    }
  d6:	d9 cf       	rjmp	.-78     	; 0x8a <main+0xa>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
