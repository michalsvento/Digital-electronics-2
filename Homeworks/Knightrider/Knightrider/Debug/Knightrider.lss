
Knightrider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db1  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000733  00000000  00000000  00001171  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000472  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000451  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d2  00000000  00000000  00002211  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000024e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 81 00 	call	0x102	; 0x102 <main>
  78:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
/* GPIO_write_high */

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_config_input_pullup>:
  98:	fc 01       	movw	r30, r24
  9a:	80 81       	ld	r24, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_config_input_pullup+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_config_input_pullup+0xa>
  aa:	92 2f       	mov	r25, r18
  ac:	90 95       	com	r25
  ae:	89 23       	and	r24, r25
  b0:	80 83       	st	Z, r24
  b2:	80 81       	ld	r24, Z
  b4:	81 81       	ldd	r24, Z+1	; 0x01
  b6:	28 2b       	or	r18, r24
  b8:	21 83       	std	Z+1, r18	; 0x01
  ba:	08 95       	ret

000000bc <GPIO_write_low>:
  bc:	fc 01       	movw	r30, r24
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <GPIO_write_low+0xe>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <GPIO_write_low+0xa>
  ce:	20 95       	com	r18
  d0:	29 23       	and	r18, r25
  d2:	20 83       	st	Z, r18
  d4:	08 95       	ret

000000d6 <GPIO_toggle>:
/*--------------------------------------------------------------------*/
/* GPIO_toggle */				// toggle choosen bit

void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  d6:	fc 01       	movw	r30, r24
  d8:	40 81       	ld	r20, Z
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <GPIO_toggle+0xe>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <GPIO_toggle+0xa>
  e8:	24 27       	eor	r18, r20
  ea:	20 83       	st	Z, r18
  ec:	08 95       	ret

000000ee <GPIO_read>:
/*--------------------------------------------------------------------*/
/* GPIO_read */			//read the value of chosen bit and return value due the condition

uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	if(bit_is_clear(*reg_name, pin_num))
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <GPIO_read+0xc>
  f6:	95 95       	asr	r25
  f8:	87 95       	ror	r24
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <GPIO_read+0x8>
	}
	else
	{
		return 1;
	}
}
  fe:	81 70       	andi	r24, 0x01	; 1
 100:	08 95       	ret

00000102 <main>:
int main(void)
{
    /* GREEN LED */
    // Set pin as output in Data Direction Register...
    //DDRB = DDRB | (1<<LED_1) | (1<<LED_2)| (1<<LED_3) | (1<<LED_4) | (1<<LED_5) ;
	GPIO_config_output(&DDRB,LED_1);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	84 e2       	ldi	r24, 0x24	; 36
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_config_output(&DDRB,LED_2);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	84 e2       	ldi	r24, 0x24	; 36
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_config_output(&DDRB,LED_3);
 116:	63 e0       	ldi	r22, 0x03	; 3
 118:	84 e2       	ldi	r24, 0x24	; 36
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_config_output(&DDRB,LED_4);
 120:	64 e0       	ldi	r22, 0x04	; 4
 122:	84 e2       	ldi	r24, 0x24	; 36
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_config_output(&DDRB,LED_5);
 12a:	65 e0       	ldi	r22, 0x05	; 5
 12c:	84 e2       	ldi	r24, 0x24	; 36
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	
    // ...and turn LED off in Data Register
    //PORTB = PORTB & ~(1<<LED_1) ;
	
	GPIO_write_low(&PORTB,LED_1);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	85 e2       	ldi	r24, 0x25	; 37
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 5e 00 	call	0xbc	; 0xbc <GPIO_write_low>
	
	GPIO_config_input_pullup(&DDRD,BTN);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	8a e2       	ldi	r24, 0x2A	; 42
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_config_input_pullup>
			_delay_ms(BLINK_DELAY);
		}
		
    PORTB = PORTB & ~(1<<LED_1) ;
	*/
		if(!GPIO_read(&PIND,BTN))
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	89 e2       	ldi	r24, 0x29	; 41
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 77 00 	call	0xee	; 0xee <GPIO_read>
 152:	81 11       	cpse	r24, r1
 154:	f9 cf       	rjmp	.-14     	; 0x148 <main+0x46>
		{
		
			GPIO_toggle(&PORTB,LED_1);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	85 e2       	ldi	r24, 0x25	; 37
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	84 e3       	ldi	r24, 0x34	; 52
 164:	9c e0       	ldi	r25, 0x0C	; 12
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x64>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x6e>
 170:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			GPIO_toggle(&PORTB,LED_1);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	85 e2       	ldi	r24, 0x25	; 37
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
			GPIO_toggle(&PORTB,LED_2);	
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	85 e2       	ldi	r24, 0x25	; 37
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	84 e3       	ldi	r24, 0x34	; 52
 18a:	9c e0       	ldi	r25, 0x0C	; 12
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x8a>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x94>
 196:	00 00       	nop
		
			_delay_ms(BLINK_DELAY);
			GPIO_toggle(&PORTB,LED_2);
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	85 e2       	ldi	r24, 0x25	; 37
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
			GPIO_toggle(&PORTB,LED_3);
 1a2:	63 e0       	ldi	r22, 0x03	; 3
 1a4:	85 e2       	ldi	r24, 0x25	; 37
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	84 e3       	ldi	r24, 0x34	; 52
 1b0:	9c e0       	ldi	r25, 0x0C	; 12
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0xb0>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0xba>
 1bc:	00 00       	nop
		
			_delay_ms(BLINK_DELAY);
			GPIO_toggle(&PORTB,LED_3);
 1be:	63 e0       	ldi	r22, 0x03	; 3
 1c0:	85 e2       	ldi	r24, 0x25	; 37
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
			GPIO_toggle(&PORTB,LED_4);
 1c8:	64 e0       	ldi	r22, 0x04	; 4
 1ca:	85 e2       	ldi	r24, 0x25	; 37
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	84 e3       	ldi	r24, 0x34	; 52
 1d6:	9c e0       	ldi	r25, 0x0C	; 12
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0xd6>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0xe0>
 1e2:	00 00       	nop
		
			_delay_ms(BLINK_DELAY);
			GPIO_toggle(&PORTB,LED_4);
 1e4:	64 e0       	ldi	r22, 0x04	; 4
 1e6:	85 e2       	ldi	r24, 0x25	; 37
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
			GPIO_toggle(&PORTB,LED_5);
 1ee:	65 e0       	ldi	r22, 0x05	; 5
 1f0:	85 e2       	ldi	r24, 0x25	; 37
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	84 e3       	ldi	r24, 0x34	; 52
 1fc:	9c e0       	ldi	r25, 0x0C	; 12
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0xfc>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x106>
 208:	00 00       	nop
		
			_delay_ms(BLINK_DELAY);
			GPIO_toggle(&PORTB,LED_5);
 20a:	65 e0       	ldi	r22, 0x05	; 5
 20c:	85 e2       	ldi	r24, 0x25	; 37
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
			GPIO_toggle(&PORTB,LED_4);
 214:	64 e0       	ldi	r22, 0x04	; 4
 216:	85 e2       	ldi	r24, 0x25	; 37
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	84 e3       	ldi	r24, 0x34	; 52
 222:	9c e0       	ldi	r25, 0x0C	; 12
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x122>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x12c>
 22e:	00 00       	nop
		
			_delay_ms(BLINK_DELAY);
			GPIO_toggle(&PORTB,LED_4);
 230:	64 e0       	ldi	r22, 0x04	; 4
 232:	85 e2       	ldi	r24, 0x25	; 37
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
			GPIO_toggle(&PORTB,LED_3);
 23a:	63 e0       	ldi	r22, 0x03	; 3
 23c:	85 e2       	ldi	r24, 0x25	; 37
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	84 e3       	ldi	r24, 0x34	; 52
 248:	9c e0       	ldi	r25, 0x0C	; 12
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0x148>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0x152>
 254:	00 00       	nop
		
			_delay_ms(BLINK_DELAY);
			GPIO_toggle(&PORTB,LED_3);
 256:	63 e0       	ldi	r22, 0x03	; 3
 258:	85 e2       	ldi	r24, 0x25	; 37
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
			GPIO_toggle(&PORTB,LED_2);
 260:	62 e0       	ldi	r22, 0x02	; 2
 262:	85 e2       	ldi	r24, 0x25	; 37
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	84 e3       	ldi	r24, 0x34	; 52
 26e:	9c e0       	ldi	r25, 0x0C	; 12
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x16e>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x178>
 27a:	00 00       	nop
		
			_delay_ms(BLINK_DELAY);
			GPIO_toggle(&PORTB,LED_2);
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	85 e2       	ldi	r24, 0x25	; 37
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 286:	60 cf       	rjmp	.-320    	; 0x148 <main+0x46>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
