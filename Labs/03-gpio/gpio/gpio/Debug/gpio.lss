
gpio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3c  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e5  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000387  00000000  00000000  0000144d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000406  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00001cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001e37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_3>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  78:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
/* GPIO_config_input_nopull */
void GPIO_config_input_nopull(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
	*reg_name++;                    // Change pointer to Data Register
	*reg_name = *reg_name & ~(1<<pin_num);   // Data Register
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_config_input_pullup>:
}
/*--------------------------------------------------------------------*/
/* GPIO_config_input_pullup */
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
  98:	fc 01       	movw	r30, r24
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
  9a:	80 81       	ld	r24, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_config_input_pullup+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_config_input_pullup+0xa>
  aa:	92 2f       	mov	r25, r18
  ac:	90 95       	com	r25
  ae:	89 23       	and	r24, r25
  b0:	80 83       	st	Z, r24
	*reg_name++;                    // Change pointer to Data Register
  b2:	80 81       	ld	r24, Z
	*reg_name = *reg_name | (1<<pin_num);   // Data Register
  b4:	81 81       	ldd	r24, Z+1	; 0x01
  b6:	28 2b       	or	r18, r24
  b8:	21 83       	std	Z+1, r18	; 0x01
  ba:	08 95       	ret

000000bc <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
/* GPIO_write_low */
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  bc:	fc 01       	movw	r30, r24
	*reg_name = *reg_name & ~(1<<pin_num);
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <GPIO_write_low+0xe>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <GPIO_write_low+0xa>
  ce:	20 95       	com	r18
  d0:	29 23       	and	r18, r25
  d2:	20 83       	st	Z, r18
  d4:	08 95       	ret

000000d6 <GPIO_write_high>:
/*--------------------------------------------------------------------*/
/* GPIO_write_high */

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  d6:	fc 01       	movw	r30, r24
  d8:	40 81       	ld	r20, Z
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <GPIO_write_high+0xe>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <GPIO_write_high+0xa>
  e8:	24 2b       	or	r18, r20
  ea:	20 83       	st	Z, r18
  ec:	08 95       	ret

000000ee <GPIO_toggle>:
/*--------------------------------------------------------------------*/
/* GPIO_toggle */				// toggle choosen bit

void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  ee:	fc 01       	movw	r30, r24
  f0:	40 81       	ld	r20, Z
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <GPIO_toggle+0xe>
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <GPIO_toggle+0xa>
 100:	24 27       	eor	r18, r20
 102:	20 83       	st	Z, r18
 104:	08 95       	ret

00000106 <GPIO_read>:
/*--------------------------------------------------------------------*/
/* GPIO_read */			//read the value of chosen bit and return value due the condition

uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	if(bit_is_clear(*reg_name, pin_num))
 106:	fc 01       	movw	r30, r24
 108:	80 81       	ld	r24, Z
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <GPIO_read+0xc>
 10e:	95 95       	asr	r25
 110:	87 95       	ror	r24
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <GPIO_read+0x8>
	}
	else
	{
		return 1;
	}
}
 116:	81 70       	andi	r24, 0x01	; 1
 118:	08 95       	ret

0000011a <main>:
 * library is used instead of low-level logic operations.
 */
int main(void)
{
    /* GREEN LED active high */
	GPIO_config_output(&DDRB, LED_GREEN);
 11a:	65 e0       	ldi	r22, 0x05	; 5
 11c:	84 e2       	ldi	r24, 0x24	; 36
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_GREEN);
 124:	65 e0       	ldi	r22, 0x05	; 5
 126:	85 e2       	ldi	r24, 0x25	; 37
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 5e 00 	call	0xbc	; 0xbc <GPIO_write_low>

    /* RED LED active low*/
	GPIO_config_output(&DDRC, LED_RED);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	87 e2       	ldi	r24, 0x27	; 39
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_high(&PORTC, LED_RED);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	88 e2       	ldi	r24, 0x28	; 40
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_write_high>
    /* push button */
    // WRITE YOUR CODE HERE
	GPIO_config_input_pullup(&DDRD,BTN);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	8a e2       	ldi	r24, 0x2A	; 42
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_config_input_pullup>
	
	PCICR |= (1<<PCIE2);
 14c:	e8 e6       	ldi	r30, 0x68	; 104
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	84 60       	ori	r24, 0x04	; 4
 154:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT16);
 156:	ed e6       	ldi	r30, 0x6D	; 109
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
	
	sei();
 160:	78 94       	sei

    // Infinite loop
    while (1)
    {
        
		if(!GPIO_read(&PIND, BTN))  // active low BTN
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	89 e2       	ldi	r24, 0x29	; 41
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_read>
 16c:	81 11       	cpse	r24, r1
 16e:	f9 cf       	rjmp	.-14     	; 0x162 <main+0x48>
		{
			GPIO_toggle(&PORTB,LED_GREEN);
 170:	65 e0       	ldi	r22, 0x05	; 5
 172:	85 e2       	ldi	r24, 0x25	; 37
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 77 00 	call	0xee	; 0xee <GPIO_toggle>
			GPIO_toggle(&PORTC,LED_RED);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	88 e2       	ldi	r24, 0x28	; 40
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 77 00 	call	0xee	; 0xee <GPIO_toggle>
 184:	ee cf       	rjmp	.-36     	; 0x162 <main+0x48>

00000186 <__vector_3>:
    // Will never reach this
    return 0;
}

ISR(PCINT0_vect)
{
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	if(!GPIO_read(&PIND, BTN))  // active low BTN
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	89 e2       	ldi	r24, 0x29	; 41
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_read>
 1b2:	81 11       	cpse	r24, r1
 1b4:	0a c0       	rjmp	.+20     	; 0x1ca <__vector_3+0x44>
	{
		GPIO_toggle(&PORTB,LED_GREEN);
 1b6:	65 e0       	ldi	r22, 0x05	; 5
 1b8:	85 e2       	ldi	r24, 0x25	; 37
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 77 00 	call	0xee	; 0xee <GPIO_toggle>
		GPIO_toggle(&PORTC,LED_RED);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	88 e2       	ldi	r24, 0x28	; 40
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 77 00 	call	0xee	; 0xee <GPIO_toggle>
	}
	
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
