
hc-sr04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000780  00000814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000780  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  0080013c  0080013c  00000850  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed3  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d5  00000000  00000000  0000185b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000645  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059e  00000000  00000000  0000297c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000539  00000000  00000000  00002f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003453  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_18>
  4c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 38       	cpi	r26, 0x8A	; 138
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  9e:	0c 94 be 03 	jmp	0x77c	; 0x77c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/* GPIO_config_input_nopull */
void GPIO_config_input_nopull(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
	*reg_name++;                    // Change pointer to Data Register
	*reg_name = *reg_name & ~(1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
}
/*--------------------------------------------------------------------*/
/* GPIO_config_input_pullup */
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
	*reg_name++;                    // Change pointer to Data Register
  d8:	80 81       	ld	r24, Z
	*reg_name = *reg_name | (1<<pin_num);   // Data Register
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	28 2b       	or	r18, r24
  de:	21 83       	std	Z+1, r18	; 0x01
  e0:	08 95       	ret

000000e2 <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
/* GPIO_write_low */
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  e2:	fc 01       	movw	r30, r24
	*reg_name = *reg_name & ~(1<<pin_num);
  e4:	90 81       	ld	r25, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_write_low+0xe>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_write_low+0xa>
  f4:	20 95       	com	r18
  f6:	29 23       	and	r18, r25
  f8:	20 83       	st	Z, r18
  fa:	08 95       	ret

000000fc <GPIO_write_high>:
/*--------------------------------------------------------------------*/
/* GPIO_write_high */

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  fc:	fc 01       	movw	r30, r24
  fe:	40 81       	ld	r20, Z
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_write_high+0xe>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_write_high+0xa>
 10e:	24 2b       	or	r18, r20
 110:	20 83       	st	Z, r18
 112:	08 95       	ret

00000114 <main>:
	//lcd_init(LCD_DISP_ON);
	//lcd_gotoxy(1,0);
	//lcd_puts("Distance");
	
	
	GPIO_config_output(&DDRB,TRIGGER);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	84 e2       	ldi	r24, 0x24	; 36
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB,TRIGGER);
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	85 e2       	ldi	r24, 0x25	; 37
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	GPIO_config_input_pullup(&DDRB,ECHO);
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	84 e2       	ldi	r24, 0x24	; 36
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	
	// Timer0 1us overflow interrupt 
	// F_CPU/freq*2*N -1
	OCR0A=7;
 132:	87 e0       	ldi	r24, 0x07	; 7
 134:	87 bd       	out	0x27, r24	; 39
	TIM0_overflow_16u();
 136:	85 b5       	in	r24, 0x25	; 37
 138:	89 7f       	andi	r24, 0xF9	; 249
 13a:	85 bd       	out	0x25, r24	; 37
 13c:	85 b5       	in	r24, 0x25	; 37
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	85 bd       	out	0x25, r24	; 37
	TIM0_CTC();
 142:	84 b5       	in	r24, 0x24	; 36
 144:	82 60       	ori	r24, 0x02	; 2
 146:	84 bd       	out	0x24, r24	; 36
 148:	84 b5       	in	r24, 0x24	; 36
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	84 bd       	out	0x24, r24	; 36
 14e:	85 b5       	in	r24, 0x25	; 37
 150:	87 7f       	andi	r24, 0xF7	; 247
 152:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_COMPA();
 154:	ee e6       	ldi	r30, 0x6E	; 110
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	80 83       	st	Z, r24
	
	
	
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 15e:	87 e6       	ldi	r24, 0x67	; 103
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 ed 01 	call	0x3da	; 0x3da <uart_init>
	uart_puts("ahoj");
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 1b 02 	call	0x436	; 0x436 <uart_puts>
	
	//enable global interrupt
	sei();
 16e:	78 94       	sei
	// Infinite loop
    while (1)
    {
        /* Empty loop. All subsequent operations are performed exclusively 
         * inside interrupt service routines ISRs */
		uart_puts("ahoj");
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 1b 02 	call	0x436	; 0x436 <uart_puts>
 178:	fb cf       	rjmp	.-10     	; 0x170 <main+0x5c>

0000017a <__vector_14>:

/*ISR TIMER0 ovf controls the trigger impulse
*
*/

ISR(TIMER0_COMPA_vect){
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	4f 93       	push	r20
 192:	5f 93       	push	r21
 194:	6f 93       	push	r22
 196:	7f 93       	push	r23
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	25 97       	sbiw	r28, 0x05	; 5
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	cd bf       	out	0x3d, r28	; 61
	
	static uint16_t number_of_overflows=0;
	static float distance=0;
	static uint16_t length=0;
	char	lcd_string[5]="     ";
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	e0 e0       	ldi	r30, 0x00	; 0
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	de 01       	movw	r26, r28
 1ba:	11 96       	adiw	r26, 0x01	; 1
 1bc:	01 90       	ld	r0, Z+
 1be:	0d 92       	st	X+, r0
 1c0:	8a 95       	dec	r24
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <__vector_14+0x42>
	number_of_overflows++;
 1c4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <number_of_overflows.1987>
 1c8:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <number_of_overflows.1987+0x1>
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <number_of_overflows.1987+0x1>
 1d2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <number_of_overflows.1987>
	
	static state_t state= STATE_PULSE;
	
	
	// FSM
	switch (state)
 1d6:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <state.1996>
 1da:	21 30       	cpi	r18, 0x01	; 1
 1dc:	a9 f0       	breq	.+42     	; 0x208 <__vector_14+0x8e>
 1de:	18 f0       	brcs	.+6      	; 0x1e6 <__vector_14+0x6c>
 1e0:	22 30       	cpi	r18, 0x02	; 2
 1e2:	f1 f0       	breq	.+60     	; 0x220 <__vector_14+0xa6>
 1e4:	84 c0       	rjmp	.+264    	; 0x2ee <__vector_14+0x174>
	{
	    // Start trigger pulse
	    case STATE_PULSE:
			
			if(number_of_overflows<=10)
 1e6:	0b 97       	sbiw	r24, 0x0b	; 11
 1e8:	30 f4       	brcc	.+12     	; 0x1f6 <__vector_14+0x7c>
			{
				GPIO_write_high(&PORTB,TRIGGER);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	85 e2       	ldi	r24, 0x25	; 37
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 1f4:	7e c0       	rjmp	.+252    	; 0x2f2 <__vector_14+0x178>
			}
			else
			{
				GPIO_write_low(&PORTB,TRIGGER);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	85 e2       	ldi	r24, 0x25	; 37
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
				state=STATE_ECHODETECT;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <state.1996>
 206:	75 c0       	rjmp	.+234    	; 0x2f2 <__vector_14+0x178>
			
			// Detect the echo impulse and count the length of echo
			case STATE_ECHODETECT:
				if (number_of_overflows<70000)
				{
					if (bit_is_set(PINB,ECHO))
 208:	1a 9b       	sbis	0x03, 2	; 3
 20a:	73 c0       	rjmp	.+230    	; 0x2f2 <__vector_14+0x178>
					{
						length++;
 20c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <length.1989>
 210:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <length.1989+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <length.1989+0x1>
 21a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <length.1989>
 21e:	69 c0       	rjmp	.+210    	; 0x2f2 <__vector_14+0x178>
			break;

			//
			case STATE_ECHOCOUNT:
			
				distance=length*0.017;
 220:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <length.1989>
 224:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <length.1989+0x1>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 65 02 	call	0x4ca	; 0x4ca <__floatunsisf>
 230:	26 e9       	ldi	r18, 0x96	; 150
 232:	33 e4       	ldi	r19, 0x43	; 67
 234:	4b e8       	ldi	r20, 0x8B	; 139
 236:	5c e3       	ldi	r21, 0x3C	; 60
 238:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__mulsf3>
 23c:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <__data_end>
 240:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <__data_end+0x1>
 244:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end+0x2>
 248:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <__data_end+0x3>
				
				if(distance<2)
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e4       	ldi	r21, 0x40	; 64
 254:	0e 94 2a 02 	call	0x454	; 0x454 <__cmpsf2>
 258:	88 23       	and	r24, r24
 25a:	24 f4       	brge	.+8      	; 0x264 <__vector_14+0xea>
				{
					uart_puts("smaller than 2");
 25c:	8b e0       	ldi	r24, 0x0B	; 11
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 1b 02 	call	0x436	; 0x436 <uart_puts>
				}
				if (distance<400)
 264:	c0 90 3c 01 	lds	r12, 0x013C	; 0x80013c <__data_end>
 268:	d0 90 3d 01 	lds	r13, 0x013D	; 0x80013d <__data_end+0x1>
 26c:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <__data_end+0x2>
 270:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <__data_end+0x3>
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	48 ec       	ldi	r20, 0xC8	; 200
 27a:	53 e4       	ldi	r21, 0x43	; 67
 27c:	c7 01       	movw	r24, r14
 27e:	b6 01       	movw	r22, r12
 280:	0e 94 2a 02 	call	0x454	; 0x454 <__cmpsf2>
 284:	88 23       	and	r24, r24
 286:	a4 f4       	brge	.+40     	; 0x2b0 <__vector_14+0x136>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 288:	c7 01       	movw	r24, r14
 28a:	b6 01       	movw	r22, r12
 28c:	0e 94 2f 02 	call	0x45e	; 0x45e <__fixsfsi>
 290:	dc 01       	movw	r26, r24
 292:	cb 01       	movw	r24, r22
 294:	4a e0       	ldi	r20, 0x0A	; 10
 296:	be 01       	movw	r22, r28
 298:	6f 5f       	subi	r22, 0xFF	; 255
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	0e 94 89 03 	call	0x712	; 0x712 <__itoa_ncheck>
				{
					itoa(distance,lcd_string,10);
					uart_puts("Vzdialenost je");
 2a0:	8a e1       	ldi	r24, 0x1A	; 26
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 1b 02 	call	0x436	; 0x436 <uart_puts>
					uart_puts(lcd_string);
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	0e 94 1b 02 	call	0x436	; 0x436 <uart_puts>
				}
				if (distance>400)
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	48 ec       	ldi	r20, 0xC8	; 200
 2b6:	53 e4       	ldi	r21, 0x43	; 67
 2b8:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <__data_end>
 2bc:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <__data_end+0x1>
 2c0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end+0x2>
 2c4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x3>
 2c8:	0e 94 ef 02 	call	0x5de	; 0x5de <__gesf2>
 2cc:	18 16       	cp	r1, r24
 2ce:	24 f4       	brge	.+8      	; 0x2d8 <__vector_14+0x15e>
				{
					uart_puts("No object or > 400");
 2d0:	89 e2       	ldi	r24, 0x29	; 41
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 1b 02 	call	0x436	; 0x436 <uart_puts>
				}
				
				number_of_overflows=0;
 2d8:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <number_of_overflows.1987+0x1>
 2dc:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <number_of_overflows.1987>
				length=0;
 2e0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <length.1989+0x1>
 2e4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <length.1989>
				state=STATE_PULSE;
 2e8:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <state.1996>
			break;
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__vector_14+0x178>

			// If something unexpected happens then move to PULSE
			default:
				state = STATE_PULSE;
 2ee:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <state.1996>
			break;
	}

}
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	df 90       	pop	r13
 31e:	cf 90       	pop	r12
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	2f 93       	push	r18
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
 33e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 342:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 346:	8c 71       	andi	r24, 0x1C	; 28
 348:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <UART_RxHead>
 34c:	ef 5f       	subi	r30, 0xFF	; 255
 34e:	ef 71       	andi	r30, 0x1F	; 31
 350:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_RxTail>
 354:	e9 17       	cp	r30, r25
 356:	39 f0       	breq	.+14     	; 0x366 <__vector_18+0x3c>
 358:	e0 93 47 01 	sts	0x0147, r30	; 0x800147 <UART_RxHead>
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	e6 5b       	subi	r30, 0xB6	; 182
 360:	fe 4f       	sbci	r31, 0xFE	; 254
 362:	20 83       	st	Z, r18
 364:	01 c0       	rjmp	.+2      	; 0x368 <__vector_18+0x3e>
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <UART_LastRxError>
 36c:	89 2b       	or	r24, r25
 36e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <UART_LastRxError>
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <__vector_19>:
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	8f 93       	push	r24
 392:	9f 93       	push	r25
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
 398:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <UART_TxHead>
 39c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <UART_TxTail>
 3a0:	98 17       	cp	r25, r24
 3a2:	69 f0       	breq	.+26     	; 0x3be <__vector_19+0x38>
 3a4:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <UART_TxTail>
 3a8:	ef 5f       	subi	r30, 0xFF	; 255
 3aa:	ef 71       	andi	r30, 0x1F	; 31
 3ac:	e0 93 48 01 	sts	0x0148, r30	; 0x800148 <UART_TxTail>
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	e6 59       	subi	r30, 0x96	; 150
 3b4:	fe 4f       	sbci	r31, 0xFE	; 254
 3b6:	80 81       	ld	r24, Z
 3b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <__vector_19+0x42>
 3be:	e1 ec       	ldi	r30, 0xC1	; 193
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	8f 7d       	andi	r24, 0xDF	; 223
 3c6:	80 83       	st	Z, r24
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <uart_init>:
 3da:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <UART_TxHead>
 3de:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <UART_TxTail>
 3e2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <UART_RxHead>
 3e6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_RxTail>
 3ea:	99 23       	and	r25, r25
 3ec:	1c f4       	brge	.+6      	; 0x3f4 <uart_init+0x1a>
 3ee:	22 e0       	ldi	r18, 0x02	; 2
 3f0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 3f4:	90 78       	andi	r25, 0x80	; 128
 3f6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 3fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 3fe:	88 e9       	ldi	r24, 0x98	; 152
 400:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 40a:	08 95       	ret

0000040c <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 40c:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <UART_TxHead>
 410:	2f 5f       	subi	r18, 0xFF	; 255
 412:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 414:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <UART_TxTail>
 418:	29 17       	cp	r18, r25
 41a:	e1 f3       	breq	.-8      	; 0x414 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 41c:	e2 2f       	mov	r30, r18
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	e6 59       	subi	r30, 0x96	; 150
 422:	fe 4f       	sbci	r31, 0xFE	; 254
 424:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 426:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 42a:	e1 ec       	ldi	r30, 0xC1	; 193
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	80 62       	ori	r24, 0x20	; 32
 432:	80 83       	st	Z, r24
 434:	08 95       	ret

00000436 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	ec 01       	movw	r28, r24
    while (*s)
 43c:	88 81       	ld	r24, Y
 43e:	88 23       	and	r24, r24
 440:	31 f0       	breq	.+12     	; 0x44e <uart_puts+0x18>
 442:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 444:	0e 94 06 02 	call	0x40c	; 0x40c <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 448:	89 91       	ld	r24, Y+
 44a:	81 11       	cpse	r24, r1
 44c:	fb cf       	rjmp	.-10     	; 0x444 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <__cmpsf2>:
 454:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_cmp>
 458:	08 f4       	brcc	.+2      	; 0x45c <__cmpsf2+0x8>
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	08 95       	ret

0000045e <__fixsfsi>:
 45e:	0e 94 36 02 	call	0x46c	; 0x46c <__fixunssfsi>
 462:	68 94       	set
 464:	b1 11       	cpse	r27, r1
 466:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__fp_szero>
 46a:	08 95       	ret

0000046c <__fixunssfsi>:
 46c:	0e 94 ce 02 	call	0x59c	; 0x59c <__fp_splitA>
 470:	88 f0       	brcs	.+34     	; 0x494 <__fixunssfsi+0x28>
 472:	9f 57       	subi	r25, 0x7F	; 127
 474:	98 f0       	brcs	.+38     	; 0x49c <__fixunssfsi+0x30>
 476:	b9 2f       	mov	r27, r25
 478:	99 27       	eor	r25, r25
 47a:	b7 51       	subi	r27, 0x17	; 23
 47c:	b0 f0       	brcs	.+44     	; 0x4aa <__fixunssfsi+0x3e>
 47e:	e1 f0       	breq	.+56     	; 0x4b8 <__fixunssfsi+0x4c>
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	88 1f       	adc	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	1a f0       	brmi	.+6      	; 0x490 <__fixunssfsi+0x24>
 48a:	ba 95       	dec	r27
 48c:	c9 f7       	brne	.-14     	; 0x480 <__fixunssfsi+0x14>
 48e:	14 c0       	rjmp	.+40     	; 0x4b8 <__fixunssfsi+0x4c>
 490:	b1 30       	cpi	r27, 0x01	; 1
 492:	91 f0       	breq	.+36     	; 0x4b8 <__fixunssfsi+0x4c>
 494:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_zero>
 498:	b1 e0       	ldi	r27, 0x01	; 1
 49a:	08 95       	ret
 49c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_zero>
 4a0:	67 2f       	mov	r22, r23
 4a2:	78 2f       	mov	r23, r24
 4a4:	88 27       	eor	r24, r24
 4a6:	b8 5f       	subi	r27, 0xF8	; 248
 4a8:	39 f0       	breq	.+14     	; 0x4b8 <__fixunssfsi+0x4c>
 4aa:	b9 3f       	cpi	r27, 0xF9	; 249
 4ac:	cc f3       	brlt	.-14     	; 0x4a0 <__fixunssfsi+0x34>
 4ae:	86 95       	lsr	r24
 4b0:	77 95       	ror	r23
 4b2:	67 95       	ror	r22
 4b4:	b3 95       	inc	r27
 4b6:	d9 f7       	brne	.-10     	; 0x4ae <__fixunssfsi+0x42>
 4b8:	3e f4       	brtc	.+14     	; 0x4c8 <__fixunssfsi+0x5c>
 4ba:	90 95       	com	r25
 4bc:	80 95       	com	r24
 4be:	70 95       	com	r23
 4c0:	61 95       	neg	r22
 4c2:	7f 4f       	sbci	r23, 0xFF	; 255
 4c4:	8f 4f       	sbci	r24, 0xFF	; 255
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	08 95       	ret

000004ca <__floatunsisf>:
 4ca:	e8 94       	clt
 4cc:	09 c0       	rjmp	.+18     	; 0x4e0 <__floatsisf+0x12>

000004ce <__floatsisf>:
 4ce:	97 fb       	bst	r25, 7
 4d0:	3e f4       	brtc	.+14     	; 0x4e0 <__floatsisf+0x12>
 4d2:	90 95       	com	r25
 4d4:	80 95       	com	r24
 4d6:	70 95       	com	r23
 4d8:	61 95       	neg	r22
 4da:	7f 4f       	sbci	r23, 0xFF	; 255
 4dc:	8f 4f       	sbci	r24, 0xFF	; 255
 4de:	9f 4f       	sbci	r25, 0xFF	; 255
 4e0:	99 23       	and	r25, r25
 4e2:	a9 f0       	breq	.+42     	; 0x50e <__floatsisf+0x40>
 4e4:	f9 2f       	mov	r31, r25
 4e6:	96 e9       	ldi	r25, 0x96	; 150
 4e8:	bb 27       	eor	r27, r27
 4ea:	93 95       	inc	r25
 4ec:	f6 95       	lsr	r31
 4ee:	87 95       	ror	r24
 4f0:	77 95       	ror	r23
 4f2:	67 95       	ror	r22
 4f4:	b7 95       	ror	r27
 4f6:	f1 11       	cpse	r31, r1
 4f8:	f8 cf       	rjmp	.-16     	; 0x4ea <__floatsisf+0x1c>
 4fa:	fa f4       	brpl	.+62     	; 0x53a <__floatsisf+0x6c>
 4fc:	bb 0f       	add	r27, r27
 4fe:	11 f4       	brne	.+4      	; 0x504 <__floatsisf+0x36>
 500:	60 ff       	sbrs	r22, 0
 502:	1b c0       	rjmp	.+54     	; 0x53a <__floatsisf+0x6c>
 504:	6f 5f       	subi	r22, 0xFF	; 255
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	16 c0       	rjmp	.+44     	; 0x53a <__floatsisf+0x6c>
 50e:	88 23       	and	r24, r24
 510:	11 f0       	breq	.+4      	; 0x516 <__floatsisf+0x48>
 512:	96 e9       	ldi	r25, 0x96	; 150
 514:	11 c0       	rjmp	.+34     	; 0x538 <__floatsisf+0x6a>
 516:	77 23       	and	r23, r23
 518:	21 f0       	breq	.+8      	; 0x522 <__floatsisf+0x54>
 51a:	9e e8       	ldi	r25, 0x8E	; 142
 51c:	87 2f       	mov	r24, r23
 51e:	76 2f       	mov	r23, r22
 520:	05 c0       	rjmp	.+10     	; 0x52c <__floatsisf+0x5e>
 522:	66 23       	and	r22, r22
 524:	71 f0       	breq	.+28     	; 0x542 <__floatsisf+0x74>
 526:	96 e8       	ldi	r25, 0x86	; 134
 528:	86 2f       	mov	r24, r22
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	2a f0       	brmi	.+10     	; 0x53a <__floatsisf+0x6c>
 530:	9a 95       	dec	r25
 532:	66 0f       	add	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	88 1f       	adc	r24, r24
 538:	da f7       	brpl	.-10     	; 0x530 <__floatsisf+0x62>
 53a:	88 0f       	add	r24, r24
 53c:	96 95       	lsr	r25
 53e:	87 95       	ror	r24
 540:	97 f9       	bld	r25, 7
 542:	08 95       	ret

00000544 <__fp_cmp>:
 544:	99 0f       	add	r25, r25
 546:	00 08       	sbc	r0, r0
 548:	55 0f       	add	r21, r21
 54a:	aa 0b       	sbc	r26, r26
 54c:	e0 e8       	ldi	r30, 0x80	; 128
 54e:	fe ef       	ldi	r31, 0xFE	; 254
 550:	16 16       	cp	r1, r22
 552:	17 06       	cpc	r1, r23
 554:	e8 07       	cpc	r30, r24
 556:	f9 07       	cpc	r31, r25
 558:	c0 f0       	brcs	.+48     	; 0x58a <__fp_cmp+0x46>
 55a:	12 16       	cp	r1, r18
 55c:	13 06       	cpc	r1, r19
 55e:	e4 07       	cpc	r30, r20
 560:	f5 07       	cpc	r31, r21
 562:	98 f0       	brcs	.+38     	; 0x58a <__fp_cmp+0x46>
 564:	62 1b       	sub	r22, r18
 566:	73 0b       	sbc	r23, r19
 568:	84 0b       	sbc	r24, r20
 56a:	95 0b       	sbc	r25, r21
 56c:	39 f4       	brne	.+14     	; 0x57c <__fp_cmp+0x38>
 56e:	0a 26       	eor	r0, r26
 570:	61 f0       	breq	.+24     	; 0x58a <__fp_cmp+0x46>
 572:	23 2b       	or	r18, r19
 574:	24 2b       	or	r18, r20
 576:	25 2b       	or	r18, r21
 578:	21 f4       	brne	.+8      	; 0x582 <__fp_cmp+0x3e>
 57a:	08 95       	ret
 57c:	0a 26       	eor	r0, r26
 57e:	09 f4       	brne	.+2      	; 0x582 <__fp_cmp+0x3e>
 580:	a1 40       	sbci	r26, 0x01	; 1
 582:	a6 95       	lsr	r26
 584:	8f ef       	ldi	r24, 0xFF	; 255
 586:	81 1d       	adc	r24, r1
 588:	81 1d       	adc	r24, r1
 58a:	08 95       	ret

0000058c <__fp_split3>:
 58c:	57 fd       	sbrc	r21, 7
 58e:	90 58       	subi	r25, 0x80	; 128
 590:	44 0f       	add	r20, r20
 592:	55 1f       	adc	r21, r21
 594:	59 f0       	breq	.+22     	; 0x5ac <__fp_splitA+0x10>
 596:	5f 3f       	cpi	r21, 0xFF	; 255
 598:	71 f0       	breq	.+28     	; 0x5b6 <__fp_splitA+0x1a>
 59a:	47 95       	ror	r20

0000059c <__fp_splitA>:
 59c:	88 0f       	add	r24, r24
 59e:	97 fb       	bst	r25, 7
 5a0:	99 1f       	adc	r25, r25
 5a2:	61 f0       	breq	.+24     	; 0x5bc <__fp_splitA+0x20>
 5a4:	9f 3f       	cpi	r25, 0xFF	; 255
 5a6:	79 f0       	breq	.+30     	; 0x5c6 <__fp_splitA+0x2a>
 5a8:	87 95       	ror	r24
 5aa:	08 95       	ret
 5ac:	12 16       	cp	r1, r18
 5ae:	13 06       	cpc	r1, r19
 5b0:	14 06       	cpc	r1, r20
 5b2:	55 1f       	adc	r21, r21
 5b4:	f2 cf       	rjmp	.-28     	; 0x59a <__fp_split3+0xe>
 5b6:	46 95       	lsr	r20
 5b8:	f1 df       	rcall	.-30     	; 0x59c <__fp_splitA>
 5ba:	08 c0       	rjmp	.+16     	; 0x5cc <__fp_splitA+0x30>
 5bc:	16 16       	cp	r1, r22
 5be:	17 06       	cpc	r1, r23
 5c0:	18 06       	cpc	r1, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	f1 cf       	rjmp	.-30     	; 0x5a8 <__fp_splitA+0xc>
 5c6:	86 95       	lsr	r24
 5c8:	71 05       	cpc	r23, r1
 5ca:	61 05       	cpc	r22, r1
 5cc:	08 94       	sec
 5ce:	08 95       	ret

000005d0 <__fp_zero>:
 5d0:	e8 94       	clt

000005d2 <__fp_szero>:
 5d2:	bb 27       	eor	r27, r27
 5d4:	66 27       	eor	r22, r22
 5d6:	77 27       	eor	r23, r23
 5d8:	cb 01       	movw	r24, r22
 5da:	97 f9       	bld	r25, 7
 5dc:	08 95       	ret

000005de <__gesf2>:
 5de:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_cmp>
 5e2:	08 f4       	brcc	.+2      	; 0x5e6 <__gesf2+0x8>
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	08 95       	ret

000005e8 <__mulsf3>:
 5e8:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3x>
 5ec:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__fp_round>
 5f0:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__fp_pscA>
 5f4:	38 f0       	brcs	.+14     	; 0x604 <__mulsf3+0x1c>
 5f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__fp_pscB>
 5fa:	20 f0       	brcs	.+8      	; 0x604 <__mulsf3+0x1c>
 5fc:	95 23       	and	r25, r21
 5fe:	11 f0       	breq	.+4      	; 0x604 <__mulsf3+0x1c>
 600:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__fp_inf>
 604:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_nan>
 608:	11 24       	eor	r1, r1
 60a:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__fp_szero>

0000060e <__mulsf3x>:
 60e:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_split3>
 612:	70 f3       	brcs	.-36     	; 0x5f0 <__mulsf3+0x8>

00000614 <__mulsf3_pse>:
 614:	95 9f       	mul	r25, r21
 616:	c1 f3       	breq	.-16     	; 0x608 <__mulsf3+0x20>
 618:	95 0f       	add	r25, r21
 61a:	50 e0       	ldi	r21, 0x00	; 0
 61c:	55 1f       	adc	r21, r21
 61e:	62 9f       	mul	r22, r18
 620:	f0 01       	movw	r30, r0
 622:	72 9f       	mul	r23, r18
 624:	bb 27       	eor	r27, r27
 626:	f0 0d       	add	r31, r0
 628:	b1 1d       	adc	r27, r1
 62a:	63 9f       	mul	r22, r19
 62c:	aa 27       	eor	r26, r26
 62e:	f0 0d       	add	r31, r0
 630:	b1 1d       	adc	r27, r1
 632:	aa 1f       	adc	r26, r26
 634:	64 9f       	mul	r22, r20
 636:	66 27       	eor	r22, r22
 638:	b0 0d       	add	r27, r0
 63a:	a1 1d       	adc	r26, r1
 63c:	66 1f       	adc	r22, r22
 63e:	82 9f       	mul	r24, r18
 640:	22 27       	eor	r18, r18
 642:	b0 0d       	add	r27, r0
 644:	a1 1d       	adc	r26, r1
 646:	62 1f       	adc	r22, r18
 648:	73 9f       	mul	r23, r19
 64a:	b0 0d       	add	r27, r0
 64c:	a1 1d       	adc	r26, r1
 64e:	62 1f       	adc	r22, r18
 650:	83 9f       	mul	r24, r19
 652:	a0 0d       	add	r26, r0
 654:	61 1d       	adc	r22, r1
 656:	22 1f       	adc	r18, r18
 658:	74 9f       	mul	r23, r20
 65a:	33 27       	eor	r19, r19
 65c:	a0 0d       	add	r26, r0
 65e:	61 1d       	adc	r22, r1
 660:	23 1f       	adc	r18, r19
 662:	84 9f       	mul	r24, r20
 664:	60 0d       	add	r22, r0
 666:	21 1d       	adc	r18, r1
 668:	82 2f       	mov	r24, r18
 66a:	76 2f       	mov	r23, r22
 66c:	6a 2f       	mov	r22, r26
 66e:	11 24       	eor	r1, r1
 670:	9f 57       	subi	r25, 0x7F	; 127
 672:	50 40       	sbci	r21, 0x00	; 0
 674:	9a f0       	brmi	.+38     	; 0x69c <__mulsf3_pse+0x88>
 676:	f1 f0       	breq	.+60     	; 0x6b4 <__mulsf3_pse+0xa0>
 678:	88 23       	and	r24, r24
 67a:	4a f0       	brmi	.+18     	; 0x68e <__mulsf3_pse+0x7a>
 67c:	ee 0f       	add	r30, r30
 67e:	ff 1f       	adc	r31, r31
 680:	bb 1f       	adc	r27, r27
 682:	66 1f       	adc	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	88 1f       	adc	r24, r24
 688:	91 50       	subi	r25, 0x01	; 1
 68a:	50 40       	sbci	r21, 0x00	; 0
 68c:	a9 f7       	brne	.-22     	; 0x678 <__mulsf3_pse+0x64>
 68e:	9e 3f       	cpi	r25, 0xFE	; 254
 690:	51 05       	cpc	r21, r1
 692:	80 f0       	brcs	.+32     	; 0x6b4 <__mulsf3_pse+0xa0>
 694:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__fp_inf>
 698:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__fp_szero>
 69c:	5f 3f       	cpi	r21, 0xFF	; 255
 69e:	e4 f3       	brlt	.-8      	; 0x698 <__mulsf3_pse+0x84>
 6a0:	98 3e       	cpi	r25, 0xE8	; 232
 6a2:	d4 f3       	brlt	.-12     	; 0x698 <__mulsf3_pse+0x84>
 6a4:	86 95       	lsr	r24
 6a6:	77 95       	ror	r23
 6a8:	67 95       	ror	r22
 6aa:	b7 95       	ror	r27
 6ac:	f7 95       	ror	r31
 6ae:	e7 95       	ror	r30
 6b0:	9f 5f       	subi	r25, 0xFF	; 255
 6b2:	c1 f7       	brne	.-16     	; 0x6a4 <__mulsf3_pse+0x90>
 6b4:	fe 2b       	or	r31, r30
 6b6:	88 0f       	add	r24, r24
 6b8:	91 1d       	adc	r25, r1
 6ba:	96 95       	lsr	r25
 6bc:	87 95       	ror	r24
 6be:	97 f9       	bld	r25, 7
 6c0:	08 95       	ret

000006c2 <__fp_inf>:
 6c2:	97 f9       	bld	r25, 7
 6c4:	9f 67       	ori	r25, 0x7F	; 127
 6c6:	80 e8       	ldi	r24, 0x80	; 128
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	08 95       	ret

000006ce <__fp_nan>:
 6ce:	9f ef       	ldi	r25, 0xFF	; 255
 6d0:	80 ec       	ldi	r24, 0xC0	; 192
 6d2:	08 95       	ret

000006d4 <__fp_pscA>:
 6d4:	00 24       	eor	r0, r0
 6d6:	0a 94       	dec	r0
 6d8:	16 16       	cp	r1, r22
 6da:	17 06       	cpc	r1, r23
 6dc:	18 06       	cpc	r1, r24
 6de:	09 06       	cpc	r0, r25
 6e0:	08 95       	ret

000006e2 <__fp_pscB>:
 6e2:	00 24       	eor	r0, r0
 6e4:	0a 94       	dec	r0
 6e6:	12 16       	cp	r1, r18
 6e8:	13 06       	cpc	r1, r19
 6ea:	14 06       	cpc	r1, r20
 6ec:	05 06       	cpc	r0, r21
 6ee:	08 95       	ret

000006f0 <__fp_round>:
 6f0:	09 2e       	mov	r0, r25
 6f2:	03 94       	inc	r0
 6f4:	00 0c       	add	r0, r0
 6f6:	11 f4       	brne	.+4      	; 0x6fc <__fp_round+0xc>
 6f8:	88 23       	and	r24, r24
 6fa:	52 f0       	brmi	.+20     	; 0x710 <__fp_round+0x20>
 6fc:	bb 0f       	add	r27, r27
 6fe:	40 f4       	brcc	.+16     	; 0x710 <__fp_round+0x20>
 700:	bf 2b       	or	r27, r31
 702:	11 f4       	brne	.+4      	; 0x708 <__fp_round+0x18>
 704:	60 ff       	sbrs	r22, 0
 706:	04 c0       	rjmp	.+8      	; 0x710 <__fp_round+0x20>
 708:	6f 5f       	subi	r22, 0xFF	; 255
 70a:	7f 4f       	sbci	r23, 0xFF	; 255
 70c:	8f 4f       	sbci	r24, 0xFF	; 255
 70e:	9f 4f       	sbci	r25, 0xFF	; 255
 710:	08 95       	ret

00000712 <__itoa_ncheck>:
 712:	bb 27       	eor	r27, r27
 714:	4a 30       	cpi	r20, 0x0A	; 10
 716:	31 f4       	brne	.+12     	; 0x724 <__itoa_ncheck+0x12>
 718:	99 23       	and	r25, r25
 71a:	22 f4       	brpl	.+8      	; 0x724 <__itoa_ncheck+0x12>
 71c:	bd e2       	ldi	r27, 0x2D	; 45
 71e:	90 95       	com	r25
 720:	81 95       	neg	r24
 722:	9f 4f       	sbci	r25, 0xFF	; 255
 724:	0c 94 95 03 	jmp	0x72a	; 0x72a <__utoa_common>

00000728 <__utoa_ncheck>:
 728:	bb 27       	eor	r27, r27

0000072a <__utoa_common>:
 72a:	fb 01       	movw	r30, r22
 72c:	55 27       	eor	r21, r21
 72e:	aa 27       	eor	r26, r26
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	aa 1f       	adc	r26, r26
 736:	a4 17       	cp	r26, r20
 738:	10 f0       	brcs	.+4      	; 0x73e <__utoa_common+0x14>
 73a:	a4 1b       	sub	r26, r20
 73c:	83 95       	inc	r24
 73e:	50 51       	subi	r21, 0x10	; 16
 740:	b9 f7       	brne	.-18     	; 0x730 <__utoa_common+0x6>
 742:	a0 5d       	subi	r26, 0xD0	; 208
 744:	aa 33       	cpi	r26, 0x3A	; 58
 746:	08 f0       	brcs	.+2      	; 0x74a <__utoa_common+0x20>
 748:	a9 5d       	subi	r26, 0xD9	; 217
 74a:	a1 93       	st	Z+, r26
 74c:	00 97       	sbiw	r24, 0x00	; 0
 74e:	79 f7       	brne	.-34     	; 0x72e <__utoa_common+0x4>
 750:	b1 11       	cpse	r27, r1
 752:	b1 93       	st	Z+, r27
 754:	11 92       	st	Z+, r1
 756:	cb 01       	movw	r24, r22
 758:	0c 94 ae 03 	jmp	0x75c	; 0x75c <strrev>

0000075c <strrev>:
 75c:	dc 01       	movw	r26, r24
 75e:	fc 01       	movw	r30, r24
 760:	67 2f       	mov	r22, r23
 762:	71 91       	ld	r23, Z+
 764:	77 23       	and	r23, r23
 766:	e1 f7       	brne	.-8      	; 0x760 <strrev+0x4>
 768:	32 97       	sbiw	r30, 0x02	; 2
 76a:	04 c0       	rjmp	.+8      	; 0x774 <strrev+0x18>
 76c:	7c 91       	ld	r23, X
 76e:	6d 93       	st	X+, r22
 770:	70 83       	st	Z, r23
 772:	62 91       	ld	r22, -Z
 774:	ae 17       	cp	r26, r30
 776:	bf 07       	cpc	r27, r31
 778:	c8 f3       	brcs	.-14     	; 0x76c <strrev+0x10>
 77a:	08 95       	ret

0000077c <_exit>:
 77c:	f8 94       	cli

0000077e <__stop_program>:
 77e:	ff cf       	rjmp	.-2      	; 0x77e <__stop_program>
