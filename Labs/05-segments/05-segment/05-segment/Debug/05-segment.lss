
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000004e0  00000574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010e  0080010e  00000582  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d1  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e5  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b9  00000000  00000000  00002072  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  0000282c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052f  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000717  00000000  00000000  00002f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000036ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 94 00 	call	0x128	; 0x128 <main>
  9e:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
/* GPIO_toggle */				// toggle choosen bit

void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	28 2b       	or	r18, r24
  de:	21 83       	std	Z+1, r18	; 0x01
  e0:	08 95       	ret

000000e2 <GPIO_write_low>:
  e2:	fc 01       	movw	r30, r24
  e4:	90 81       	ld	r25, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_write_low+0xe>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_write_low+0xa>
  f4:	20 95       	com	r18
  f6:	29 23       	and	r18, r25
  f8:	20 83       	st	Z, r18
  fa:	08 95       	ret

000000fc <GPIO_write_high>:
  fc:	fc 01       	movw	r30, r24
  fe:	40 81       	ld	r20, Z
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_write_high+0xe>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_write_high+0xa>
 10e:	24 2b       	or	r18, r20
 110:	20 83       	st	Z, r18
 112:	08 95       	ret

00000114 <GPIO_read>:
/*--------------------------------------------------------------------*/
/* GPIO_read */			//read the value of chosen bit and return value due the condition

uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	if(bit_is_clear(*reg_name, pin_num))
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_read+0xc>
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_read+0x8>
	}
	else
	{
		return 1;
	}
}
 124:	81 70       	andi	r24, 0x01	; 1
 126:	08 95       	ret

00000128 <main>:
 * Timer/Counter1 overflows.
 */
int main(void)
{
    // Configure SSD signals
    SEG_init();
 128:	0e 94 c0 01 	call	0x380	; 0x380 <SEG_init>
	
	// Configure PB0 as input pull up & for Pin interrupt 
	GPIO_config_input_pullup(&DDRB,BTN);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	84 e2       	ldi	r24, 0x24	; 36
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	PCICR = PCICR | (1 << PCIE0);		
 136:	c8 e6       	ldi	r28, 0x68	; 104
 138:	d0 e0       	ldi	r29, 0x00	; 0
 13a:	88 81       	ld	r24, Y
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	88 83       	st	Y, r24
	PCMSK0 = PCMSK0 |(1 << PCINT1);
 140:	eb e6       	ldi	r30, 0x6B	; 107
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	82 60       	ori	r24, 0x02	; 2
 148:	80 83       	st	Z, r24
	
	GPIO_config_input_pullup(&DDRD,BTNCLR);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	8a e2       	ldi	r24, 0x2A	; 42
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	PCICR |= (1<< PCIE2);
 154:	88 81       	ld	r24, Y
 156:	84 60       	ori	r24, 0x04	; 4
 158:	88 83       	st	Y, r24
	PCMSK2 |= (1<< PCINT16);
 15a:	ed e6       	ldi	r30, 0x6D	; 109
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
	
    /* Configure 8-bit Timer/Counter0
     * Set prescaler and enable overflow interrupt */
	TIM0_overflow_16ms();
 164:	85 b5       	in	r24, 0x25	; 37
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	85 bd       	out	0x25, r24	; 37
 16a:	85 b5       	in	r24, 0x25	; 37
 16c:	85 60       	ori	r24, 0x05	; 5
 16e:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 170:	ee e6       	ldi	r30, 0x6E	; 110
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	81 60       	ori	r24, 0x01	; 1
 178:	80 83       	st	Z, r24
    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	TIM1_overflow_1s();
 17a:	e1 e8       	ldi	r30, 0x81	; 129
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8c 7f       	andi	r24, 0xFC	; 252
 182:	80 83       	st	Z, r24
 184:	80 81       	ld	r24, Z
 186:	84 60       	ori	r24, 0x04	; 4
 188:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 18a:	ef e6       	ldi	r30, 0x6F	; 111
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	81 60       	ori	r24, 0x01	; 1
 192:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask
	sei();
 194:	78 94       	sei
 196:	ff cf       	rjmp	.-2      	; 0x196 <main+0x6e>

00000198 <__vector_3>:
/**
 * ISR starts when is change on PB1
 */

ISR(PCINT0_vect)
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	4f 93       	push	r20
 1a8:	5f 93       	push	r21
 1aa:	6f 93       	push	r22
 1ac:	7f 93       	push	r23
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
	if(!GPIO_read(&PINB,BTN)){
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	83 e2       	ldi	r24, 0x23	; 35
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 1c4:	81 11       	cpse	r24, r1
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <__vector_3+0x40>
		units = 0;
 1c8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <units>
		decimals = 0;
 1cc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <decimals>
		seconds	=0;
 1d0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <seconds>
		tens = 0;
 1d4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}

}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_5>:

ISR(PCINT2_vect)
{	
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	if(!GPIO_read(&DDRD,BTNCLR))
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	8a e2       	ldi	r24, 0x2A	; 42
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 226:	81 11       	cpse	r24, r1
 228:	0b c0       	rjmp	.+22     	; 0x240 <__vector_5+0x46>
	{
			SEG_clear();
 22a:	0e 94 4f 02 	call	0x49e	; 0x49e <SEG_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	87 ea       	ldi	r24, 0xA7	; 167
 232:	91 e6       	ldi	r25, 0x61	; 97
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <__vector_5+0x3a>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <__vector_5+0x44>
 23e:	00 00       	nop
			_delay_ms(2000);
	}
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <__vector_16>:
/**
 * ISR starts when Timer/Counter0 overflows.  Display value on SSD
 */


ISR(TIMER0_OVF_vect){
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	

	switch(position){
 284:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <position>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	81 f0       	breq	.+32     	; 0x2ac <__vector_16+0x4a>
 28c:	28 f0       	brcs	.+10     	; 0x298 <__vector_16+0x36>
 28e:	82 30       	cpi	r24, 0x02	; 2
 290:	b9 f0       	breq	.+46     	; 0x2c0 <__vector_16+0x5e>
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	f9 f0       	breq	.+62     	; 0x2d4 <__vector_16+0x72>
 296:	27 c0       	rjmp	.+78     	; 0x2e6 <__vector_16+0x84>
		case 0:
			SEG_update_shift_regs(units,0,1);
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <units>
 2a0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SEG_update_shift_regs>
			position=1;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <position>
			break;
 2aa:	25 c0       	rjmp	.+74     	; 0x2f6 <__vector_16+0x94>
		case 1:
			SEG_update_shift_regs(decimals,1,1);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <decimals>
 2b4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SEG_update_shift_regs>
			position=2;
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <position>
			break;
 2be:	1b c0       	rjmp	.+54     	; 0x2f6 <__vector_16+0x94>
		case 2:
			SEG_update_shift_regs(seconds,2,0);
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	62 e0       	ldi	r22, 0x02	; 2
 2c4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <seconds>
 2c8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SEG_update_shift_regs>
			position=3;
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <position>
			break;
 2d2:	11 c0       	rjmp	.+34     	; 0x2f6 <__vector_16+0x94>
		case 3:
			SEG_update_shift_regs(tens,3,1);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 2dc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SEG_update_shift_regs>
			position=0;
 2e0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <position>
			break;
 2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <__vector_16+0x94>
		default:
			SEG_update_shift_regs(units,0,1);
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <units>
 2ee:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SEG_update_shift_regs>
			position=0;
 2f2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <position>
			}
			
			
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <__vector_13>:

/* ISR starts when Timer/Counter1 overflows.Increment decimal counter value 
 */


ISR(TIMER1_OVF_vect){
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	8f 93       	push	r24
	

	units++;
 324:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <units>
 328:	8f 5f       	subi	r24, 0xFF	; 255
	if(units>9)
 32a:	8a 30       	cpi	r24, 0x0A	; 10
 32c:	18 f4       	brcc	.+6      	; 0x334 <__vector_13+0x1c>


ISR(TIMER1_OVF_vect){
	

	units++;
 32e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <units>
 332:	20 c0       	rjmp	.+64     	; 0x374 <__vector_13+0x5c>
	if(units>9)
	{
		units=0;
 334:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <units>
		decimals++;
 338:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <decimals>
 33c:	8f 5f       	subi	r24, 0xFF	; 255
		if(decimals>5)
 33e:	86 30       	cpi	r24, 0x06	; 6
 340:	18 f4       	brcc	.+6      	; 0x348 <__vector_13+0x30>

	units++;
	if(units>9)
	{
		units=0;
		decimals++;
 342:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <decimals>
 346:	16 c0       	rjmp	.+44     	; 0x374 <__vector_13+0x5c>
		if(decimals>5)
		{
			decimals=0;
 348:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <decimals>
			seconds++;
 34c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <seconds>
 350:	8f 5f       	subi	r24, 0xFF	; 255
			if(seconds> 9)
 352:	8a 30       	cpi	r24, 0x0A	; 10
 354:	18 f4       	brcc	.+6      	; 0x35c <__vector_13+0x44>
		units=0;
		decimals++;
		if(decimals>5)
		{
			decimals=0;
			seconds++;
 356:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <seconds>
 35a:	0c c0       	rjmp	.+24     	; 0x374 <__vector_13+0x5c>
			if(seconds> 9)
			{
				seconds=0;
 35c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <seconds>
				tens++;
 360:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 364:	8f 5f       	subi	r24, 0xFF	; 255
				if(tens>5)
 366:	86 30       	cpi	r24, 0x06	; 6
 368:	18 f4       	brcc	.+6      	; 0x370 <__vector_13+0x58>
			decimals=0;
			seconds++;
			if(seconds> 9)
			{
				seconds=0;
				tens++;
 36a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 36e:	02 c0       	rjmp	.+4      	; 0x374 <__vector_13+0x5c>
				if(tens>5)
				{
					tens=0;
 370:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
				}
			}
		}
	}
}
 374:	8f 91       	pop	r24
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 380:	64 e0       	ldi	r22, 0x04	; 4
 382:	8a e2       	ldi	r24, 0x2A	; 42
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 38a:	67 e0       	ldi	r22, 0x07	; 7
 38c:	8a e2       	ldi	r24, 0x2A	; 42
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	84 e2       	ldi	r24, 0x24	; 36
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 39e:	08 95       	ret

000003a0 <SEG_clk_2us>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a0:	85 e0       	ldi	r24, 0x05	; 5
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <SEG_clk_2us+0x2>
 3a6:	00 00       	nop
void SEG_clk_2us(void){
	
	// Wait 1 us
	_delay_us(1);
	// Pull CLK high
	GPIO_write_high(&PORTD,SEGMENT_CLK);
 3a8:	67 e0       	ldi	r22, 0x07	; 7
 3aa:	8b e2       	ldi	r24, 0x2B	; 43
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 3b2:	85 e0       	ldi	r24, 0x05	; 5
 3b4:	8a 95       	dec	r24
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <SEG_clk_2us+0x14>
 3b8:	00 00       	nop
	// Wait 1 us
	_delay_us(1);
	// Pull CLK low
	GPIO_write_low(&PORTD,SEGMENT_CLK);
 3ba:	67 e0       	ldi	r22, 0x07	; 7
 3bc:	8b e2       	ldi	r24, 0x2B	; 43
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 3c4:	08 95       	ret

000003c6 <SEG_update_shift_regs>:
    GPIO_config_output(&DDRB, SEGMENT_DATA);
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position,uint8_t DP)
{
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
	uint8_t bit_number;
	if(DP!=0)
 3cc:	44 23       	and	r20, r20
 3ce:	31 f0       	breq	.+12     	; 0x3dc <SEG_update_shift_regs+0x16>
    {
		segments = segment_value[segments];     // 0, 1, ..., 9
 3d0:	e8 2f       	mov	r30, r24
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	ec 5f       	subi	r30, 0xFC	; 252
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	c0 81       	ld	r28, Z
 3da:	06 c0       	rjmp	.+12     	; 0x3e8 <SEG_update_shift_regs+0x22>
	}
	else
	{
		segments = segment_value[segments] & 0b11111110;
 3dc:	e8 2f       	mov	r30, r24
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	ec 5f       	subi	r30, 0xFC	; 252
 3e2:	fe 4f       	sbci	r31, 0xFE	; 254
 3e4:	c0 81       	ld	r28, Z
 3e6:	ce 7f       	andi	r28, 0xFE	; 254
	}
		
		
	position = segment_position[position];  // 0, 1, 2, 3
 3e8:	e6 2f       	mov	r30, r22
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	e0 50       	subi	r30, 0x00	; 0
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	10 81       	ld	r17, Z

    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTB,SEGMENT_DATA);
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	85 e2       	ldi	r24, 0x25	; 37
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	GPIO_write_low(&PORTD,SEGMENT_CLK);
 3fc:	67 e0       	ldi	r22, 0x07	; 7
 3fe:	8b e2       	ldi	r24, 0x2B	; 43
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
 406:	64 e0       	ldi	r22, 0x04	; 4
 408:	8b e2       	ldi	r24, 0x2B	; 43
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 410:	85 e0       	ldi	r24, 0x05	; 5
 412:	8a 95       	dec	r24
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	00 00       	nop
 418:	d8 e0       	ldi	r29, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
		// Output DATA value (bit 0 of "segments")
		if ((segments & 1) == 0)
 41a:	c0 fd       	sbrc	r28, 0
 41c:	06 c0       	rjmp	.+12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	85 e2       	ldi	r24, 0x25	; 37
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 428:	05 c0       	rjmp	.+10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		}
		else
		{
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	85 e2       	ldi	r24, 0x25	; 37
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 434:	85 e0       	ldi	r24, 0x05	; 5
 436:	8a 95       	dec	r24
 438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43a:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 43c:	67 e0       	ldi	r22, 0x07	; 7
 43e:	8b e2       	ldi	r24, 0x2B	; 43
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 446:	85 e0       	ldi	r24, 0x05	; 5
 448:	8a 95       	dec	r24
 44a:	f1 f7       	brne	.-4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 44c:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 44e:	67 e0       	ldi	r22, 0x07	; 7
 450:	8b e2       	ldi	r24, 0x2B	; 43
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
		// Shift "segments"
		segments = segments >> 1;
 458:	c6 95       	lsr	r28
 45a:	d1 50       	subi	r29, 0x01	; 1
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
    // Wait 1 us
	_delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 45c:	f1 f6       	brne	.-68     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 45e:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "position")
		if ((position & 1) == 0)
 460:	10 fd       	sbrc	r17, 0
 462:	06 c0       	rjmp	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	85 e2       	ldi	r24, 0x25	; 37
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		}
		else
		{
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	85 e2       	ldi	r24, 0x25	; 37
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
		}
		
		
		SEG_clk_2us();
 47a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <SEG_clk_2us>
		// Shift "position"
        position = position >> 1;
 47e:	16 95       	lsr	r17
 480:	c1 50       	subi	r28, 0x01	; 1
		segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 482:	71 f7       	brne	.-36     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		// Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD,SEGMENT_LATCH);
 484:	64 e0       	ldi	r22, 0x04	; 4
 486:	8b e2       	ldi	r24, 0x2B	; 43
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 48e:	85 e0       	ldi	r24, 0x05	; 5
 490:	8a 95       	dec	r24
 492:	f1 f7       	brne	.-4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 494:	00 00       	nop
    // Wait 1 us
	_delay_us(1);
}
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	08 95       	ret

0000049e <SEG_clear>:


/*--------------------------------------------------------------------*/
/* SEG_clear */

void SEG_clear(void){
 49e:	cf 93       	push	r28
	uint8_t bit_number;

	// Pull LATCH low
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
 4a0:	64 e0       	ldi	r22, 0x04	; 4
 4a2:	8b e2       	ldi	r24, 0x2B	; 43
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 4aa:	85 e0       	ldi	r24, 0x05	; 5
 4ac:	8a 95       	dec	r24
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <SEG_clear+0xe>
 4b0:	00 00       	nop
 4b2:	c0 e1       	ldi	r28, 0x10	; 16
	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 16; bit_number++)
	{
		// Turn segment off
		GPIO_write_high(&PORTB,SEGMENT_DATA);
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	85 e2       	ldi	r24, 0x25	; 37
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
		
		SEG_clk_2us();
 4be:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <SEG_clk_2us>
 4c2:	c1 50       	subi	r28, 0x01	; 1
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
	// Wait 1 us
	_delay_us(1);
	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 16; bit_number++)
 4c4:	b9 f7       	brne	.-18     	; 0x4b4 <SEG_clear+0x16>
		*/
		
	}
	
	// Pull LATCH high
	GPIO_write_high(&PORTD,SEGMENT_LATCH);
 4c6:	64 e0       	ldi	r22, 0x04	; 4
 4c8:	8b e2       	ldi	r24, 0x2B	; 43
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 4d0:	85 e0       	ldi	r24, 0x05	; 5
 4d2:	8a 95       	dec	r24
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <SEG_clear+0x34>
 4d6:	00 00       	nop
	// Wait 1 us
	_delay_us(1);

}
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <_exit>:
 4dc:	f8 94       	cli

000004de <__stop_program>:
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__stop_program>
