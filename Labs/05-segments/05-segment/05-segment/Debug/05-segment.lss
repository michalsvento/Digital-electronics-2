
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000036c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010e  0080010e  0000040e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e75  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000872  00000000  00000000  0000139d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000662  00000000  00000000  00001c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f3  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000044e  00000000  00000000  000028cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002d19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/* GPIO_config_input_pullup */
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
	*reg_name++;                    // Change pointer to Data Register
	*reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
/* GPIO_write_low */
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
	*reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/*--------------------------------------------------------------------*/
/* GPIO_write_high */

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Timer/Counter1 overflows.
 */
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 28 01 	call	0x250	; 0x250 <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(0,0,0);
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 38 01 	call	0x270	; 0x270 <SEG_update_shift_regs>
	
    /* Configure 8-bit Timer/Counter2
     * Set prescaler and enable overflow interrupt */
	TIM2_overflow_16ms();
  fe:	e1 eb       	ldi	r30, 0xB1	; 177
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	87 60       	ori	r24, 0x07	; 7
 106:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 108:	e0 e7       	ldi	r30, 0x70	; 112
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	80 83       	st	Z, r24
    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	TIM1_overflow_262ms();
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8b 7f       	andi	r24, 0xFB	; 251
 11a:	80 83       	st	Z, r24
 11c:	80 81       	ld	r24, Z
 11e:	83 60       	ori	r24, 0x03	; 3
 120:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 122:	ef e6       	ldi	r30, 0x6F	; 111
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask
	sei();
 12c:	78 94       	sei
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x3e>

00000130 <__vector_9>:
/* Interrupt service routines ----------------------------------------*/
/**
 * ISR starts when Timer/Counter0 overflows. Increment decimal counter value 
 */
ISR(TIMER2_OVF_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	{
		SEG_update_shift_regs(decimals,1);
		position=0;
	}
	*/
	switch(position){
 152:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	81 f0       	breq	.+32     	; 0x17a <__vector_9+0x4a>
 15a:	28 f0       	brcs	.+10     	; 0x166 <__vector_9+0x36>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	b9 f0       	breq	.+46     	; 0x18e <__vector_9+0x5e>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	f9 f0       	breq	.+62     	; 0x1a2 <__vector_9+0x72>
 164:	27 c0       	rjmp	.+78     	; 0x1b4 <__vector_9+0x84>
		case 0:
			SEG_update_shift_regs(units,0,1);
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <units>
 16e:	0e 94 38 01 	call	0x270	; 0x270 <SEG_update_shift_regs>
			position=1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			break;
 178:	26 c0       	rjmp	.+76     	; 0x1c6 <__vector_9+0x96>
		case 1:
			SEG_update_shift_regs(decimals,1,1);
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <decimals>
 182:	0e 94 38 01 	call	0x270	; 0x270 <SEG_update_shift_regs>
			position=2;
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			break;
 18c:	1c c0       	rjmp	.+56     	; 0x1c6 <__vector_9+0x96>
		case 2:
			SEG_update_shift_regs(seconds,2,0);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <seconds>
 196:	0e 94 38 01 	call	0x270	; 0x270 <SEG_update_shift_regs>
			position=3;
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			break;
 1a0:	12 c0       	rjmp	.+36     	; 0x1c6 <__vector_9+0x96>
		case 3:
			SEG_update_shift_regs(tens,3,1);
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	63 e0       	ldi	r22, 0x03	; 3
 1a6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tens>
 1aa:	0e 94 38 01 	call	0x270	; 0x270 <SEG_update_shift_regs>
			position=0;
 1ae:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
			break;
 1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <__vector_9+0x96>
		default:
			SEG_update_shift_regs(units,0,1);
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <units>
 1bc:	0e 94 38 01 	call	0x270	; 0x270 <SEG_update_shift_regs>
			position=1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			break;
	}
			
}
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	7f 91       	pop	r23
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <__vector_13>:

/* ISR starts when Timer/Counter1 overflows. Display value on SSD
 */

ISR(TIMER1_OVF_vect)
{
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	8f 93       	push	r24
	units++;
 1f4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <units>
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
	if(units>9)
 1fa:	8a 30       	cpi	r24, 0x0A	; 10
 1fc:	18 f4       	brcc	.+6      	; 0x204 <__vector_13+0x1c>
/* ISR starts when Timer/Counter1 overflows. Display value on SSD
 */

ISR(TIMER1_OVF_vect)
{
	units++;
 1fe:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <units>
 202:	20 c0       	rjmp	.+64     	; 0x244 <__vector_13+0x5c>
	if(units>9)
	{
		units=0;
 204:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <units>
		decimals++;
 208:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <decimals>
 20c:	8f 5f       	subi	r24, 0xFF	; 255
			if(decimals>5)
 20e:	86 30       	cpi	r24, 0x06	; 6
 210:	18 f4       	brcc	.+6      	; 0x218 <__vector_13+0x30>
{
	units++;
	if(units>9)
	{
		units=0;
		decimals++;
 212:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <decimals>
 216:	16 c0       	rjmp	.+44     	; 0x244 <__vector_13+0x5c>
			if(decimals>5)
			{
				decimals=0;
 218:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <decimals>
				seconds++;
 21c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <seconds>
 220:	8f 5f       	subi	r24, 0xFF	; 255
					if(seconds> 9)
 222:	8a 30       	cpi	r24, 0x0A	; 10
 224:	18 f4       	brcc	.+6      	; 0x22c <__vector_13+0x44>
		units=0;
		decimals++;
			if(decimals>5)
			{
				decimals=0;
				seconds++;
 226:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <seconds>
 22a:	0c c0       	rjmp	.+24     	; 0x244 <__vector_13+0x5c>
					if(seconds> 9)
					{
						seconds=0;
 22c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <seconds>
						tens++;
 230:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tens>
 234:	8f 5f       	subi	r24, 0xFF	; 255
							if(tens>5)
 236:	86 30       	cpi	r24, 0x06	; 6
 238:	18 f4       	brcc	.+6      	; 0x240 <__vector_13+0x58>
				decimals=0;
				seconds++;
					if(seconds> 9)
					{
						seconds=0;
						tens++;
 23a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tens>
 23e:	02 c0       	rjmp	.+4      	; 0x244 <__vector_13+0x5c>
							if(tens>5)
							{
								tens=0;
 240:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <tens>
							}
					}
			}
	}
 244:	8f 91       	pop	r24
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 250:	64 e0       	ldi	r22, 0x04	; 4
 252:	8a e2       	ldi	r24, 0x2A	; 42
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 25a:	67 e0       	ldi	r22, 0x07	; 7
 25c:	8a e2       	ldi	r24, 0x2A	; 42
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	84 e2       	ldi	r24, 0x24	; 36
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 26e:	08 95       	ret

00000270 <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position,uint8_t DP)
{
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
	uint8_t bit_number;
	if(DP!=0)
 276:	44 23       	and	r20, r20
 278:	31 f0       	breq	.+12     	; 0x286 <SEG_update_shift_regs+0x16>
    {
		segments = segment_value[segments];     // 0, 1, ..., 9
 27a:	e8 2f       	mov	r30, r24
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	ec 5f       	subi	r30, 0xFC	; 252
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	c0 81       	ld	r28, Z
 284:	06 c0       	rjmp	.+12     	; 0x292 <SEG_update_shift_regs+0x22>
	}
	else
	{
		segments = segment_value[segments] & 0b11111110;
 286:	e8 2f       	mov	r30, r24
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	ec 5f       	subi	r30, 0xFC	; 252
 28c:	fe 4f       	sbci	r31, 0xFE	; 254
 28e:	c0 81       	ld	r28, Z
 290:	ce 7f       	andi	r28, 0xFE	; 254
	}
		
		
	position = segment_position[position];  // 0, 1, 2, 3
 292:	e6 2f       	mov	r30, r22
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	e0 50       	subi	r30, 0x00	; 0
 298:	ff 4f       	sbci	r31, 0xFF	; 255
 29a:	10 81       	ld	r17, Z

    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTB,SEGMENT_DATA);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	85 e2       	ldi	r24, 0x25	; 37
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD,SEGMENT_CLK);
 2a6:	67 e0       	ldi	r22, 0x07	; 7
 2a8:	8b e2       	ldi	r24, 0x2B	; 43
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
 2b0:	64 e0       	ldi	r22, 0x04	; 4
 2b2:	8b e2       	ldi	r24, 0x2B	; 43
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	85 e0       	ldi	r24, 0x05	; 5
 2bc:	8a 95       	dec	r24
 2be:	f1 f7       	brne	.-4      	; 0x2bc <SEG_update_shift_regs+0x4c>
 2c0:	00 00       	nop
 2c2:	d8 e0       	ldi	r29, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
		// Output DATA value (bit 0 of "segments")
		if ((segments & 1) == 0)
 2c4:	c0 fd       	sbrc	r28, 0
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <SEG_update_shift_regs+0x64>
		{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	85 e2       	ldi	r24, 0x25	; 37
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <SEG_update_shift_regs+0x6e>
		}
		else
		{
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	85 e2       	ldi	r24, 0x25	; 37
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2de:	85 e0       	ldi	r24, 0x05	; 5
 2e0:	8a 95       	dec	r24
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <SEG_update_shift_regs+0x70>
 2e4:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 2e6:	67 e0       	ldi	r22, 0x07	; 7
 2e8:	8b e2       	ldi	r24, 0x2B	; 43
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2f0:	85 e0       	ldi	r24, 0x05	; 5
 2f2:	8a 95       	dec	r24
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <SEG_update_shift_regs+0x82>
 2f6:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 2f8:	67 e0       	ldi	r22, 0x07	; 7
 2fa:	8b e2       	ldi	r24, 0x2B	; 43
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		// Shift "segments"
		segments = segments >> 1;
 302:	c6 95       	lsr	r28
 304:	d1 50       	subi	r29, 0x01	; 1
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
    // Wait 1 us
	_delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 306:	f1 f6       	brne	.-68     	; 0x2c4 <SEG_update_shift_regs+0x54>
 308:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "position")
		if ((position & 1) == 0)
 30a:	10 fd       	sbrc	r17, 0
 30c:	06 c0       	rjmp	.+12     	; 0x31a <SEG_update_shift_regs+0xaa>
		{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	85 e2       	ldi	r24, 0x25	; 37
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 318:	05 c0       	rjmp	.+10     	; 0x324 <SEG_update_shift_regs+0xb4>
		}
		else
		{
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	85 e2       	ldi	r24, 0x25	; 37
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 324:	85 e0       	ldi	r24, 0x05	; 5
 326:	8a 95       	dec	r24
 328:	f1 f7       	brne	.-4      	; 0x326 <SEG_update_shift_regs+0xb6>
 32a:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 32c:	67 e0       	ldi	r22, 0x07	; 7
 32e:	8b e2       	ldi	r24, 0x2B	; 43
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 336:	85 e0       	ldi	r24, 0x05	; 5
 338:	8a 95       	dec	r24
 33a:	f1 f7       	brne	.-4      	; 0x338 <SEG_update_shift_regs+0xc8>
 33c:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 33e:	67 e0       	ldi	r22, 0x07	; 7
 340:	8b e2       	ldi	r24, 0x2B	; 43
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 348:	16 95       	lsr	r17
 34a:	c1 50       	subi	r28, 0x01	; 1
		segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 34c:	f1 f6       	brne	.-68     	; 0x30a <SEG_update_shift_regs+0x9a>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD,SEGMENT_LATCH);
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	8b e2       	ldi	r24, 0x2B	; 43
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 358:	85 e0       	ldi	r24, 0x05	; 5
 35a:	8a 95       	dec	r24
 35c:	f1 f7       	brne	.-4      	; 0x35a <SEG_update_shift_regs+0xea>
 35e:	00 00       	nop
    // Wait 1 us
	_delay_us(1);
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	08 95       	ret

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
