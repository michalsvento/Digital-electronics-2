
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000041c  000004b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010e  0080010e  000004be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011c7  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000872  00000000  00000000  000017af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007af  00000000  00000000  00002021  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  000027d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000509  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a4  00000000  00000000  00002eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003655  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 94 00 	call	0x128	; 0x128 <main>
  9e:	0c 94 0c 02 	jmp	0x418	; 0x418 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
/* GPIO_toggle */				// toggle choosen bit

void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	28 2b       	or	r18, r24
  de:	21 83       	std	Z+1, r18	; 0x01
  e0:	08 95       	ret

000000e2 <GPIO_write_low>:
  e2:	fc 01       	movw	r30, r24
  e4:	90 81       	ld	r25, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_write_low+0xe>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_write_low+0xa>
  f4:	20 95       	com	r18
  f6:	29 23       	and	r18, r25
  f8:	20 83       	st	Z, r18
  fa:	08 95       	ret

000000fc <GPIO_write_high>:
  fc:	fc 01       	movw	r30, r24
  fe:	40 81       	ld	r20, Z
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_write_high+0xe>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_write_high+0xa>
 10e:	24 2b       	or	r18, r20
 110:	20 83       	st	Z, r18
 112:	08 95       	ret

00000114 <GPIO_read>:
/*--------------------------------------------------------------------*/
/* GPIO_read */			//read the value of chosen bit and return value due the condition

uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	if(bit_is_clear(*reg_name, pin_num))
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_read+0xc>
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_read+0x8>
	}
	else
	{
		return 1;
	}
}
 124:	81 70       	andi	r24, 0x01	; 1
 126:	08 95       	ret

00000128 <main>:
 * Timer/Counter1 overflows.
 */
int main(void)
{
    // Configure SSD signals
    SEG_init();
 128:	0e 94 80 01 	call	0x300	; 0x300 <SEG_init>
	
	// Configure PB0 as input pull up & for Pin interrupt 
	GPIO_config_input_pullup(&DDRB,BTN);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	84 e2       	ldi	r24, 0x24	; 36
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	PCICR = PCICR | (1 << PCIE0);		
 136:	e8 e6       	ldi	r30, 0x68	; 104
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	80 83       	st	Z, r24
	PCMSK0 = PCMSK0 |(1 << PCINT1);
 140:	eb e6       	ldi	r30, 0x6B	; 107
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	82 60       	ori	r24, 0x02	; 2
 148:	80 83       	st	Z, r24
	
    /* Configure 8-bit Timer/Counter0
     * Set prescaler and enable overflow interrupt */
	TIM0_overflow_16ms();
 14a:	85 b5       	in	r24, 0x25	; 37
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	85 bd       	out	0x25, r24	; 37
 150:	85 b5       	in	r24, 0x25	; 37
 152:	85 60       	ori	r24, 0x05	; 5
 154:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 156:	ee e6       	ldi	r30, 0x6E	; 110
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	TIM1_overflow_262ms();
 160:	e1 e8       	ldi	r30, 0x81	; 129
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8b 7f       	andi	r24, 0xFB	; 251
 168:	80 83       	st	Z, r24
 16a:	80 81       	ld	r24, Z
 16c:	83 60       	ori	r24, 0x03	; 3
 16e:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 170:	ef e6       	ldi	r30, 0x6F	; 111
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	81 60       	ori	r24, 0x01	; 1
 178:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask
	sei();
 17a:	78 94       	sei
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0x54>

0000017e <__vector_3>:
/**
 * ISR starts when is change on PB1
 */

ISR(PCINT0_vect)
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	4f 93       	push	r20
 18e:	5f 93       	push	r21
 190:	6f 93       	push	r22
 192:	7f 93       	push	r23
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
	if(!GPIO_read(&PINB,BTN)){
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	83 e2       	ldi	r24, 0x23	; 35
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 1aa:	81 11       	cpse	r24, r1
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <__vector_3+0x40>
		units = 0;
 1ae:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <units>
		decimals = 0;
 1b2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <decimals>
		seconds	=0;
 1b6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <seconds>
		tens = 0;
 1ba:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}

}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__vector_16>:
/**
 * ISR starts when Timer/Counter0 overflows.  Display value on SSD
 */

ISR(TIMER0_OVF_vect)
{
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
	

	switch(position){
 202:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <position>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	81 f0       	breq	.+32     	; 0x22a <__vector_16+0x4a>
 20a:	28 f0       	brcs	.+10     	; 0x216 <__vector_16+0x36>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	b9 f0       	breq	.+46     	; 0x23e <__vector_16+0x5e>
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	f9 f0       	breq	.+62     	; 0x252 <__vector_16+0x72>
 214:	27 c0       	rjmp	.+78     	; 0x264 <__vector_16+0x84>
		case 0:
			SEG_update_shift_regs(units,0,1);
 216:	41 e0       	ldi	r20, 0x01	; 1
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <units>
 21e:	0e 94 90 01 	call	0x320	; 0x320 <SEG_update_shift_regs>
			position=1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <position>
			break;
 228:	26 c0       	rjmp	.+76     	; 0x276 <__vector_16+0x96>
		case 1:
			SEG_update_shift_regs(decimals,1,1);
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <decimals>
 232:	0e 94 90 01 	call	0x320	; 0x320 <SEG_update_shift_regs>
			position=2;
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <position>
			break;
 23c:	1c c0       	rjmp	.+56     	; 0x276 <__vector_16+0x96>
		case 2:
			SEG_update_shift_regs(seconds,2,0);
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <seconds>
 246:	0e 94 90 01 	call	0x320	; 0x320 <SEG_update_shift_regs>
			position=3;
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <position>
			break;
 250:	12 c0       	rjmp	.+36     	; 0x276 <__vector_16+0x96>
		case 3:
			SEG_update_shift_regs(tens,3,1);
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 25a:	0e 94 90 01 	call	0x320	; 0x320 <SEG_update_shift_regs>
			position=0;
 25e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <position>
			break;
 262:	09 c0       	rjmp	.+18     	; 0x276 <__vector_16+0x96>
		default:
			SEG_update_shift_regs(units,0,1);
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <units>
 26c:	0e 94 90 01 	call	0x320	; 0x320 <SEG_update_shift_regs>
			position=1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <position>
			break;
	}
			
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_13>:

/* ISR starts when Timer/Counter1 overflows.Increment decimal counter value 
 */
ISR(TIMER1_OVF_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	8f 93       	push	r24
	units++;
 2a4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <units>
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
	if(units>9)
 2aa:	8a 30       	cpi	r24, 0x0A	; 10
 2ac:	18 f4       	brcc	.+6      	; 0x2b4 <__vector_13+0x1c>

/* ISR starts when Timer/Counter1 overflows.Increment decimal counter value 
 */
ISR(TIMER1_OVF_vect)
{
	units++;
 2ae:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <units>
 2b2:	20 c0       	rjmp	.+64     	; 0x2f4 <__vector_13+0x5c>
	if(units>9)
	{
		units=0;
 2b4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <units>
		decimals++;
 2b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <decimals>
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
			if(decimals>5)
 2be:	86 30       	cpi	r24, 0x06	; 6
 2c0:	18 f4       	brcc	.+6      	; 0x2c8 <__vector_13+0x30>
{
	units++;
	if(units>9)
	{
		units=0;
		decimals++;
 2c2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <decimals>
 2c6:	16 c0       	rjmp	.+44     	; 0x2f4 <__vector_13+0x5c>
			if(decimals>5)
			{
				decimals=0;
 2c8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <decimals>
				seconds++;
 2cc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <seconds>
 2d0:	8f 5f       	subi	r24, 0xFF	; 255
					if(seconds> 9)
 2d2:	8a 30       	cpi	r24, 0x0A	; 10
 2d4:	18 f4       	brcc	.+6      	; 0x2dc <__vector_13+0x44>
		units=0;
		decimals++;
			if(decimals>5)
			{
				decimals=0;
				seconds++;
 2d6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <seconds>
 2da:	0c c0       	rjmp	.+24     	; 0x2f4 <__vector_13+0x5c>
					if(seconds> 9)
					{
						seconds=0;
 2dc:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <seconds>
						tens++;
 2e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
							if(tens>5)
 2e6:	86 30       	cpi	r24, 0x06	; 6
 2e8:	18 f4       	brcc	.+6      	; 0x2f0 <__vector_13+0x58>
				decimals=0;
				seconds++;
					if(seconds> 9)
					{
						seconds=0;
						tens++;
 2ea:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__vector_13+0x5c>
							if(tens>5)
							{
								tens=0;
 2f0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
							}
					}
			}
	}
}
 2f4:	8f 91       	pop	r24
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 300:	64 e0       	ldi	r22, 0x04	; 4
 302:	8a e2       	ldi	r24, 0x2A	; 42
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 30a:	67 e0       	ldi	r22, 0x07	; 7
 30c:	8a e2       	ldi	r24, 0x2A	; 42
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	84 e2       	ldi	r24, 0x24	; 36
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 31e:	08 95       	ret

00000320 <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position,uint8_t DP)
{
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
	uint8_t bit_number;
	if(DP!=0)
 326:	44 23       	and	r20, r20
 328:	31 f0       	breq	.+12     	; 0x336 <SEG_update_shift_regs+0x16>
    {
		segments = segment_value[segments];     // 0, 1, ..., 9
 32a:	e8 2f       	mov	r30, r24
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	ec 5f       	subi	r30, 0xFC	; 252
 330:	fe 4f       	sbci	r31, 0xFE	; 254
 332:	c0 81       	ld	r28, Z
 334:	06 c0       	rjmp	.+12     	; 0x342 <SEG_update_shift_regs+0x22>
	}
	else
	{
		segments = segment_value[segments] & 0b11111110;
 336:	e8 2f       	mov	r30, r24
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	ec 5f       	subi	r30, 0xFC	; 252
 33c:	fe 4f       	sbci	r31, 0xFE	; 254
 33e:	c0 81       	ld	r28, Z
 340:	ce 7f       	andi	r28, 0xFE	; 254
	}
		
		
	position = segment_position[position];  // 0, 1, 2, 3
 342:	e6 2f       	mov	r30, r22
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	e0 50       	subi	r30, 0x00	; 0
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	10 81       	ld	r17, Z

    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTB,SEGMENT_DATA);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	85 e2       	ldi	r24, 0x25	; 37
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	GPIO_write_low(&PORTD,SEGMENT_CLK);
 356:	67 e0       	ldi	r22, 0x07	; 7
 358:	8b e2       	ldi	r24, 0x2B	; 43
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
 360:	64 e0       	ldi	r22, 0x04	; 4
 362:	8b e2       	ldi	r24, 0x2B	; 43
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	85 e0       	ldi	r24, 0x05	; 5
 36c:	8a 95       	dec	r24
 36e:	f1 f7       	brne	.-4      	; 0x36c <SEG_update_shift_regs+0x4c>
 370:	00 00       	nop
 372:	d8 e0       	ldi	r29, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
		// Output DATA value (bit 0 of "segments")
		if ((segments & 1) == 0)
 374:	c0 fd       	sbrc	r28, 0
 376:	06 c0       	rjmp	.+12     	; 0x384 <SEG_update_shift_regs+0x64>
		{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	85 e2       	ldi	r24, 0x25	; 37
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 382:	05 c0       	rjmp	.+10     	; 0x38e <SEG_update_shift_regs+0x6e>
		}
		else
		{
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	85 e2       	ldi	r24, 0x25	; 37
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 38e:	85 e0       	ldi	r24, 0x05	; 5
 390:	8a 95       	dec	r24
 392:	f1 f7       	brne	.-4      	; 0x390 <SEG_update_shift_regs+0x70>
 394:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 396:	67 e0       	ldi	r22, 0x07	; 7
 398:	8b e2       	ldi	r24, 0x2B	; 43
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 3a0:	85 e0       	ldi	r24, 0x05	; 5
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <SEG_update_shift_regs+0x82>
 3a6:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 3a8:	67 e0       	ldi	r22, 0x07	; 7
 3aa:	8b e2       	ldi	r24, 0x2B	; 43
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
		// Shift "segments"
		segments = segments >> 1;
 3b2:	c6 95       	lsr	r28
 3b4:	d1 50       	subi	r29, 0x01	; 1
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
    // Wait 1 us
	_delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 3b6:	f1 f6       	brne	.-68     	; 0x374 <SEG_update_shift_regs+0x54>
 3b8:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "position")
		if ((position & 1) == 0)
 3ba:	10 fd       	sbrc	r17, 0
 3bc:	06 c0       	rjmp	.+12     	; 0x3ca <SEG_update_shift_regs+0xaa>
		{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	85 e2       	ldi	r24, 0x25	; 37
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 3c8:	05 c0       	rjmp	.+10     	; 0x3d4 <SEG_update_shift_regs+0xb4>
		}
		else
		{
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	85 e2       	ldi	r24, 0x25	; 37
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	8a 95       	dec	r24
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <SEG_update_shift_regs+0xb6>
 3da:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 3dc:	67 e0       	ldi	r22, 0x07	; 7
 3de:	8b e2       	ldi	r24, 0x2B	; 43
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 3e6:	85 e0       	ldi	r24, 0x05	; 5
 3e8:	8a 95       	dec	r24
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <SEG_update_shift_regs+0xc8>
 3ec:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 3ee:	67 e0       	ldi	r22, 0x07	; 7
 3f0:	8b e2       	ldi	r24, 0x2B	; 43
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 3f8:	16 95       	lsr	r17
 3fa:	c1 50       	subi	r28, 0x01	; 1
		segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 3fc:	f1 f6       	brne	.-68     	; 0x3ba <SEG_update_shift_regs+0x9a>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD,SEGMENT_LATCH);
 3fe:	64 e0       	ldi	r22, 0x04	; 4
 400:	8b e2       	ldi	r24, 0x2B	; 43
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 408:	85 e0       	ldi	r24, 0x05	; 5
 40a:	8a 95       	dec	r24
 40c:	f1 f7       	brne	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40e:	00 00       	nop
    // Wait 1 us
	_delay_us(1);
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	08 95       	ret

00000418 <_exit>:
 418:	f8 94       	cli

0000041a <__stop_program>:
 41a:	ff cf       	rjmp	.-2      	; 0x41a <__stop_program>
