
06-lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00000690  00000724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000690  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800164  00800164  00000788  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001430  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009da  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f8  00000000  00000000  000026ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  000030b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  0000330c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac5  00000000  00000000  00003848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000430d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 36       	cpi	r26, 0x64	; 100
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e6       	ldi	r26, 0x64	; 100
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 36       	cpi	r26, 0x6B	; 107
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 46 03 	jmp	0x68c	; 0x68c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
 * value on LCD display when 8-bit Timer/Counter2 overflows.
 */
int main(void)
{
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	08 e2       	ldi	r16, 0x28	; 40
 206:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 40; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 208:	89 91       	ld	r24, Y+
 20a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 40; i++)
 20e:	c0 17       	cp	r28, r16
 210:	d1 07       	cpc	r29, r17
 212:	d1 f7       	brne	.-12     	; 0x208 <main+0x14>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	
	
	

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("00:00.0");
 222:	8e e2       	ldi	r24, 0x2E	; 46
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	
	lcd_gotoxy(11, 0);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	8b e0       	ldi	r24, 0x0B	; 11
 22e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_puts("a");
 232:	86 e3       	ldi	r24, 0x36	; 54
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
// 	lcd_puts("c");
	
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set prescaler and enable overflow interrupt every 16 ms
	
	TIM2_overflow_16ms();
 23a:	e1 eb       	ldi	r30, 0xB1	; 177
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	87 60       	ori	r24, 0x07	; 7
 242:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 244:	e0 e7       	ldi	r30, 0x70	; 112
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	81 60       	ori	r24, 0x01	; 1
 24c:	80 83       	st	Z, r24
	
	// Configure 8-bit Timer/Counter1 for Stopwatch
	// Set prescaler and enable overflow interrupt every 1 s
	
	TIM1_overflow_262ms();
 24e:	e1 e8       	ldi	r30, 0x81	; 129
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	8b 7f       	andi	r24, 0xFB	; 251
 256:	80 83       	st	Z, r24
 258:	80 81       	ld	r24, Z
 25a:	83 60       	ori	r24, 0x03	; 3
 25c:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 25e:	ef e6       	ldi	r30, 0x6F	; 111
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	81 60       	ori	r24, 0x01	; 1
 266:	80 83       	st	Z, r24
	
	// Configure 8-bit Timer/Counter2 for Stopwatch
	// Set prescaler and enable overflow interrupt every 16 ms
	
	TIM0_overflow_16ms();
 268:	85 b5       	in	r24, 0x25	; 37
 26a:	8e 7f       	andi	r24, 0xFE	; 254
 26c:	85 bd       	out	0x25, r24	; 37
 26e:	85 b5       	in	r24, 0x25	; 37
 270:	85 60       	ori	r24, 0x05	; 5
 272:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 274:	ee e6       	ldi	r30, 0x6E	; 110
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	80 83       	st	Z, r24
	

    // Enables interrupts by setting the global interrupt mask
    sei();
 27e:	78 94       	sei
 280:	ff cf       	rjmp	.-2      	; 0x280 <main+0x8c>

00000282 <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	26 97       	sbiw	r28, 0x06	; 6
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	cd bf       	out	0x3d, r28	; 61
    static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;        // Tenths of a second
	static uint8_t secs = 0;        // Seconds
	static uint8_t minutes = 0;		// minutes  
	static uint16_t secsqr = 0;	// variable for square of seconds
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
 2b2:	80 e2       	ldi	r24, 0x20	; 32
 2b4:	90 e2       	ldi	r25, 0x20	; 32
 2b6:	9a 83       	std	Y+2, r25	; 0x02
 2b8:	89 83       	std	Y+1, r24	; 0x01
	char lcd_square[4]= "    ";
 2ba:	9c 83       	std	Y+4, r25	; 0x04
 2bc:	8b 83       	std	Y+3, r24	; 0x03
 2be:	9e 83       	std	Y+6, r25	; 0x06
 2c0:	8d 83       	std	Y+5, r24	; 0x05

    number_of_overflows++;
 2c2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <number_of_overflows.1951>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows >= 6)
 2c8:	86 30       	cpi	r24, 0x06	; 6
 2ca:	18 f4       	brcc	.+6      	; 0x2d2 <__vector_9+0x50>
	static uint8_t minutes = 0;		// minutes  
	static uint16_t secsqr = 0;	// variable for square of seconds
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
	char lcd_square[4]= "    ";

    number_of_overflows++;
 2cc:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <number_of_overflows.1951>
 2d0:	83 c0       	rjmp	.+262    	; 0x3d8 <__vector_9+0x156>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 2d2:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <number_of_overflows.1951>
		
		tens++;
 2d6:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <tens.1952>
 2da:	8f 5f       	subi	r24, 0xFF	; 255
		if (tens> 9)
 2dc:	8a 30       	cpi	r24, 0x0A	; 10
 2de:	18 f4       	brcc	.+6      	; 0x2e6 <__vector_9+0x64>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
		
		tens++;
 2e0:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <tens.1952>
 2e4:	16 c0       	rjmp	.+44     	; 0x312 <__vector_9+0x90>
		if (tens> 9)
		{
			tens=0;
 2e6:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tens.1952>
			secs++;
 2ea:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <secs.1953>
 2ee:	8f 5f       	subi	r24, 0xFF	; 255
			if (secs>59)
 2f0:	8c 33       	cpi	r24, 0x3C	; 60
 2f2:	18 f4       	brcc	.+6      	; 0x2fa <__vector_9+0x78>
		
		tens++;
		if (tens> 9)
		{
			tens=0;
			secs++;
 2f4:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <secs.1953>
 2f8:	0c c0       	rjmp	.+24     	; 0x312 <__vector_9+0x90>
			if (secs>59)
			{
				secs=0;
 2fa:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <secs.1953>
				minutes++;
 2fe:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <minutes.1954>
 302:	8f 5f       	subi	r24, 0xFF	; 255
				if (minutes>59)
 304:	8c 33       	cpi	r24, 0x3C	; 60
 306:	18 f4       	brcc	.+6      	; 0x30e <__vector_9+0x8c>
			tens=0;
			secs++;
			if (secs>59)
			{
				secs=0;
				minutes++;
 308:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <minutes.1954>
 30c:	02 c0       	rjmp	.+4      	; 0x312 <__vector_9+0x90>
				if (minutes>59)
				{
					minutes=0;
 30e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <minutes.1954>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 312:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <tens.1952>
 316:	4a e0       	ldi	r20, 0x0A	; 10
 318:	be 01       	movw	r22, r28
 31a:	6f 5f       	subi	r22, 0xFF	; 255
 31c:	7f 4f       	sbci	r23, 0xFF	; 255
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 11 03 	call	0x622	; 0x622 <__itoa_ncheck>
		}
				
			

		itoa(tens, lcd_string,10);
		lcd_gotoxy(7,0);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	87 e0       	ldi	r24, 0x07	; 7
 328:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 32c:	ce 01       	movw	r24, r28
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 334:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <secs.1953>
 338:	4a e0       	ldi	r20, 0x0A	; 10
 33a:	be 01       	movw	r22, r28
 33c:	6f 5f       	subi	r22, 0xFF	; 255
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 11 03 	call	0x622	; 0x622 <__itoa_ncheck>
		
		
		itoa(secs, lcd_string,10);
		if(secs<10)
 346:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <secs.1953>
 34a:	8a 30       	cpi	r24, 0x0A	; 10
 34c:	28 f4       	brcc	.+10     	; 0x358 <__vector_9+0xd6>
		{
			lcd_gotoxy(5,0);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	85 e0       	ldi	r24, 0x05	; 5
 352:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 356:	04 c0       	rjmp	.+8      	; 0x360 <__vector_9+0xde>
		}
		else
		{
			lcd_gotoxy(4,0);	
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	84 e0       	ldi	r24, 0x04	; 4
 35c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		}
		lcd_puts(lcd_string);
 360:	ce 01       	movw	r24, r28
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 368:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <minutes.1954>
 36c:	4a e0       	ldi	r20, 0x0A	; 10
 36e:	be 01       	movw	r22, r28
 370:	6f 5f       	subi	r22, 0xFF	; 255
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 11 03 	call	0x622	; 0x622 <__itoa_ncheck>
		
		
		itoa(minutes, lcd_string,10);
		if(minutes<10)
 37a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <minutes.1954>
 37e:	8a 30       	cpi	r24, 0x0A	; 10
 380:	28 f4       	brcc	.+10     	; 0x38c <__vector_9+0x10a>
		{
			lcd_gotoxy(2,0);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 38a:	04 c0       	rjmp	.+8      	; 0x394 <__vector_9+0x112>
		}
		else
		{
			lcd_gotoxy(1,0);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		}
		lcd_puts(lcd_string);
 394:	ce 01       	movw	r24, r28
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			
		
		secsqr = secs*secs;
 39c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <secs.1953>
		if (secs==0)				// for reset on the positions 12-14
 3a0:	81 11       	cpse	r24, r1
 3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <__vector_9+0x134>
		{
			lcd_gotoxy(11,0);	
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	8b e0       	ldi	r24, 0x0B	; 11
 3a8:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts("0   ");
 3ac:	88 e3       	ldi	r24, 0x38	; 56
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 3b4:	11 c0       	rjmp	.+34     	; 0x3d8 <__vector_9+0x156>
 3b6:	4a e0       	ldi	r20, 0x0A	; 10
 3b8:	be 01       	movw	r22, r28
 3ba:	6d 5f       	subi	r22, 0xFD	; 253
 3bc:	7f 4f       	sbci	r23, 0xFF	; 255
 3be:	88 9f       	mul	r24, r24
 3c0:	c0 01       	movw	r24, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	0e 94 11 03 	call	0x622	; 0x622 <__itoa_ncheck>
		}
		else
		{
			itoa(secsqr,lcd_square,10);
			lcd_gotoxy(11,0);
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	8b e0       	ldi	r24, 0x0B	; 11
 3cc:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(lcd_square);
 3d0:	ce 01       	movw	r24, r28
 3d2:	03 96       	adiw	r24, 0x03	; 3
 3d4:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		}

		

    }
}
 3d8:	26 96       	adiw	r28, 0x06	; 6
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	bf 91       	pop	r27
 3ee:	af 91       	pop	r26
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	7f 91       	pop	r23
 3f6:	6f 91       	pop	r22
 3f8:	5f 91       	pop	r21
 3fa:	4f 91       	pop	r20
 3fc:	3f 91       	pop	r19
 3fe:	2f 91       	pop	r18
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Move one letter left every
 * 1 s.
 */
ISR(TIMER1_OVF_vect)
{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	2f 93       	push	r18
 416:	3f 93       	push	r19
 418:	4f 93       	push	r20
 41a:	5f 93       	push	r21
 41c:	6f 93       	push	r22
 41e:	7f 93       	push	r23
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
 424:	af 93       	push	r26
 426:	bf 93       	push	r27
 428:	ef 93       	push	r30
 42a:	ff 93       	push	r31
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
 434:	a2 97       	sbiw	r28, 0x22	; 34
 436:	de bf       	out	0x3e, r29	; 62
 438:	cd bf       	out	0x3d, r28	; 61
	static uint8_t i=0;
	uint8_t running_text[]= "I like Digital electronics! ";
 43a:	8d e1       	ldi	r24, 0x1D	; 29
 43c:	ed e3       	ldi	r30, 0x3D	; 61
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	de 01       	movw	r26, r28
 442:	11 96       	adiw	r26, 0x01	; 1
 444:	01 90       	ld	r0, Z+
 446:	0d 92       	st	X+, r0
 448:	8a 95       	dec	r24
 44a:	e1 f7       	brne	.-8      	; 0x444 <__vector_13+0x3a>
	char lcd_shown[5]= "     ";
 44c:	85 e0       	ldi	r24, 0x05	; 5
 44e:	e8 e2       	ldi	r30, 0x28	; 40
 450:	f1 e0       	ldi	r31, 0x01	; 1
 452:	de 01       	movw	r26, r28
 454:	5e 96       	adiw	r26, 0x1e	; 30
 456:	01 90       	ld	r0, Z+
 458:	0d 92       	st	X+, r0
 45a:	8a 95       	dec	r24
 45c:	e1 f7       	brne	.-8      	; 0x456 <__vector_13+0x4c>
	lcd_gotoxy(11,1);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	8b e0       	ldi	r24, 0x0B	; 11
 462:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	
	if(i< (sizeof(running_text)-4))
 466:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <i.1963>
 46a:	89 31       	cpi	r24, 0x19	; 25
 46c:	18 f5       	brcc	.+70     	; 0x4b4 <__vector_13+0xaa>
	{
		lcd_shown[0] = running_text[i];
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	fe 01       	movw	r30, r28
 472:	e8 0f       	add	r30, r24
 474:	f9 1f       	adc	r31, r25
 476:	21 81       	ldd	r18, Z+1	; 0x01
 478:	2e 8f       	std	Y+30, r18	; 0x1e
		lcd_shown[1] = running_text[i+1];
 47a:	fe 01       	movw	r30, r28
 47c:	e8 0f       	add	r30, r24
 47e:	f9 1f       	adc	r31, r25
 480:	22 81       	ldd	r18, Z+2	; 0x02
 482:	2f 8f       	std	Y+31, r18	; 0x1f
		lcd_shown[2] = running_text[i+2];
 484:	fe 01       	movw	r30, r28
 486:	e8 0f       	add	r30, r24
 488:	f9 1f       	adc	r31, r25
 48a:	23 81       	ldd	r18, Z+3	; 0x03
 48c:	28 a3       	std	Y+32, r18	; 0x20
		lcd_shown[3] = running_text[i+3];
 48e:	fe 01       	movw	r30, r28
 490:	e8 0f       	add	r30, r24
 492:	f9 1f       	adc	r31, r25
 494:	24 81       	ldd	r18, Z+4	; 0x04
 496:	29 a3       	std	Y+33, r18	; 0x21
		lcd_shown[4] = running_text[i+4];
 498:	fe 01       	movw	r30, r28
 49a:	e8 0f       	add	r30, r24
 49c:	f9 1f       	adc	r31, r25
 49e:	85 81       	ldd	r24, Z+5	; 0x05
 4a0:	8a a3       	std	Y+34, r24	; 0x22
		lcd_puts(lcd_shown);
 4a2:	ce 01       	movw	r24, r28
 4a4:	4e 96       	adiw	r24, 0x1e	; 30
 4a6:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		i++;
 4aa:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <i.1963>
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <i.1963>
	}

	if(i==(sizeof(running_text)-1))
 4b4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <i.1963>
 4b8:	8c 31       	cpi	r24, 0x1C	; 28
 4ba:	89 f4       	brne	.+34     	; 0x4de <__vector_13+0xd4>
	{
		lcd_shown[0] = running_text[i];
 4bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
 4be:	8e 8f       	std	Y+30, r24	; 0x1e
		lcd_shown[1] = running_text[0];
 4c0:	89 e4       	ldi	r24, 0x49	; 73
 4c2:	8f 8f       	std	Y+31, r24	; 0x1f
		lcd_shown[2] = running_text[1];
 4c4:	80 e2       	ldi	r24, 0x20	; 32
 4c6:	88 a3       	std	Y+32, r24	; 0x20
		lcd_shown[3] = running_text[2];
 4c8:	8c e6       	ldi	r24, 0x6C	; 108
 4ca:	89 a3       	std	Y+33, r24	; 0x21
		lcd_shown[4] = running_text[3];
 4cc:	89 e6       	ldi	r24, 0x69	; 105
 4ce:	8a a3       	std	Y+34, r24	; 0x22
		lcd_puts(lcd_shown);
 4d0:	ce 01       	movw	r24, r28
 4d2:	4e 96       	adiw	r24, 0x1e	; 30
 4d4:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		i=0;
 4d8:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <i.1963>
 4dc:	2c c0       	rjmp	.+88     	; 0x536 <__vector_13+0x12c>
	}

	if(i==(sizeof(running_text)-2))
 4de:	8b 31       	cpi	r24, 0x1B	; 27
 4e0:	99 f4       	brne	.+38     	; 0x508 <__vector_13+0xfe>
	{
		lcd_shown[0] = running_text[i];
 4e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4e4:	8e 8f       	std	Y+30, r24	; 0x1e
		lcd_shown[1] = running_text[i+1];
 4e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
 4e8:	8f 8f       	std	Y+31, r24	; 0x1f
		lcd_shown[2] = running_text[0];
 4ea:	89 e4       	ldi	r24, 0x49	; 73
 4ec:	88 a3       	std	Y+32, r24	; 0x20
		lcd_shown[3] = running_text[1];
 4ee:	80 e2       	ldi	r24, 0x20	; 32
 4f0:	89 a3       	std	Y+33, r24	; 0x21
		lcd_shown[4] = running_text[2];
 4f2:	8c e6       	ldi	r24, 0x6C	; 108
 4f4:	8a a3       	std	Y+34, r24	; 0x22
		lcd_puts(lcd_shown);
 4f6:	ce 01       	movw	r24, r28
 4f8:	4e 96       	adiw	r24, 0x1e	; 30
 4fa:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		i++;
 4fe:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <i.1963>
 502:	8f 5f       	subi	r24, 0xFF	; 255
 504:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <i.1963>
		}
	if(i==(sizeof(running_text)-3))
 508:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <i.1963>
 50c:	8a 31       	cpi	r24, 0x1A	; 26
 50e:	99 f4       	brne	.+38     	; 0x536 <__vector_13+0x12c>
	{
		lcd_shown[0] = running_text[i];
 510:	8b 8d       	ldd	r24, Y+27	; 0x1b
 512:	8e 8f       	std	Y+30, r24	; 0x1e
		lcd_shown[1] = running_text[i+1];
 514:	8c 8d       	ldd	r24, Y+28	; 0x1c
 516:	8f 8f       	std	Y+31, r24	; 0x1f
		lcd_shown[2] = running_text[i+2];
 518:	8d 8d       	ldd	r24, Y+29	; 0x1d
 51a:	88 a3       	std	Y+32, r24	; 0x20
		lcd_shown[3] = running_text[0];
 51c:	89 e4       	ldi	r24, 0x49	; 73
 51e:	89 a3       	std	Y+33, r24	; 0x21
		lcd_shown[4] = running_text[1];
 520:	80 e2       	ldi	r24, 0x20	; 32
 522:	8a a3       	std	Y+34, r24	; 0x22
		lcd_puts(lcd_shown);
 524:	ce 01       	movw	r24, r28
 526:	4e 96       	adiw	r24, 0x1e	; 30
 528:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		i++;
 52c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <i.1963>
 530:	8f 5f       	subi	r24, 0xFF	; 255
 532:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <i.1963>
	}
	if(i==(sizeof(running_text)-4))
 536:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <i.1963>
 53a:	89 31       	cpi	r24, 0x19	; 25
 53c:	99 f4       	brne	.+38     	; 0x564 <__vector_13+0x15a>
	{
		lcd_shown[0] = running_text[i];
 53e:	8a 8d       	ldd	r24, Y+26	; 0x1a
 540:	8e 8f       	std	Y+30, r24	; 0x1e
		lcd_shown[1] = running_text[i+1];
 542:	8b 8d       	ldd	r24, Y+27	; 0x1b
 544:	8f 8f       	std	Y+31, r24	; 0x1f
		lcd_shown[2] = running_text[i+2];
 546:	8c 8d       	ldd	r24, Y+28	; 0x1c
 548:	88 a3       	std	Y+32, r24	; 0x20
		lcd_shown[3] = running_text[i+3];
 54a:	8d 8d       	ldd	r24, Y+29	; 0x1d
 54c:	89 a3       	std	Y+33, r24	; 0x21
		lcd_shown[4] = running_text[0];
 54e:	89 e4       	ldi	r24, 0x49	; 73
 550:	8a a3       	std	Y+34, r24	; 0x22
		lcd_puts(lcd_shown);
 552:	ce 01       	movw	r24, r28
 554:	4e 96       	adiw	r24, 0x1e	; 30
 556:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		i++;
 55a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <i.1963>
 55e:	8f 5f       	subi	r24, 0xFF	; 255
 560:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <i.1963>
		}
	

}
 564:	a2 96       	adiw	r28, 0x22	; 34
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	ff 91       	pop	r31
 576:	ef 91       	pop	r30
 578:	bf 91       	pop	r27
 57a:	af 91       	pop	r26
 57c:	9f 91       	pop	r25
 57e:	8f 91       	pop	r24
 580:	7f 91       	pop	r23
 582:	6f 91       	pop	r22
 584:	5f 91       	pop	r21
 586:	4f 91       	pop	r20
 588:	3f 91       	pop	r19
 58a:	2f 91       	pop	r18
 58c:	0f 90       	pop	r0
 58e:	0f be       	out	0x3f, r0	; 63
 590:	0f 90       	pop	r0
 592:	1f 90       	pop	r1
 594:	18 95       	reti

00000596 <__vector_16>:
 * when lcd_gotoxy(7,1) & symbol 0x04 is reached
 */


ISR(TIMER0_OVF_vect)
{
 596:	1f 92       	push	r1
 598:	0f 92       	push	r0
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	0f 92       	push	r0
 59e:	11 24       	eor	r1, r1
 5a0:	2f 93       	push	r18
 5a2:	3f 93       	push	r19
 5a4:	4f 93       	push	r20
 5a6:	5f 93       	push	r21
 5a8:	6f 93       	push	r22
 5aa:	7f 93       	push	r23
 5ac:	8f 93       	push	r24
 5ae:	9f 93       	push	r25
 5b0:	af 93       	push	r26
 5b2:	bf 93       	push	r27
 5b4:	ef 93       	push	r30
 5b6:	ff 93       	push	r31
	static uint8_t symbol = 0;
	static uint8_t position = 0;

	lcd_gotoxy(1 + position, 1);
 5b8:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <position.1972>
 5bc:	61 e0       	ldi	r22, 0x01	; 1
 5be:	8f 5f       	subi	r24, 0xFF	; 255
 5c0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(symbol);
 5c4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
 5c8:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	
	symbol++;
 5cc:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
 5d0:	8f 5f       	subi	r24, 0xFF	; 255
 5d2:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <__data_end>
	if(symbol>4)
 5d6:	85 30       	cpi	r24, 0x05	; 5
 5d8:	98 f0       	brcs	.+38     	; 0x600 <__vector_16+0x6a>
	{
		position++;
 5da:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <position.1972>
 5de:	8f 5f       	subi	r24, 0xFF	; 255
 5e0:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <position.1972>
		symbol=0;
 5e4:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <__data_end>
		if (position>7)
 5e8:	88 30       	cpi	r24, 0x08	; 8
 5ea:	50 f0       	brcs	.+20     	; 0x600 <__vector_16+0x6a>
		{
			lcd_gotoxy(1,1);
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts("        ");			// 8 spaces for reset
 5f4:	8a e5       	ldi	r24, 0x5A	; 90
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			position=0;
 5fc:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <position.1972>
		}
	}
}
 600:	ff 91       	pop	r31
 602:	ef 91       	pop	r30
 604:	bf 91       	pop	r27
 606:	af 91       	pop	r26
 608:	9f 91       	pop	r25
 60a:	8f 91       	pop	r24
 60c:	7f 91       	pop	r23
 60e:	6f 91       	pop	r22
 610:	5f 91       	pop	r21
 612:	4f 91       	pop	r20
 614:	3f 91       	pop	r19
 616:	2f 91       	pop	r18
 618:	0f 90       	pop	r0
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	0f 90       	pop	r0
 61e:	1f 90       	pop	r1
 620:	18 95       	reti

00000622 <__itoa_ncheck>:
 622:	bb 27       	eor	r27, r27
 624:	4a 30       	cpi	r20, 0x0A	; 10
 626:	31 f4       	brne	.+12     	; 0x634 <__itoa_ncheck+0x12>
 628:	99 23       	and	r25, r25
 62a:	22 f4       	brpl	.+8      	; 0x634 <__itoa_ncheck+0x12>
 62c:	bd e2       	ldi	r27, 0x2D	; 45
 62e:	90 95       	com	r25
 630:	81 95       	neg	r24
 632:	9f 4f       	sbci	r25, 0xFF	; 255
 634:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__utoa_common>

00000638 <__utoa_ncheck>:
 638:	bb 27       	eor	r27, r27

0000063a <__utoa_common>:
 63a:	fb 01       	movw	r30, r22
 63c:	55 27       	eor	r21, r21
 63e:	aa 27       	eor	r26, r26
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	aa 1f       	adc	r26, r26
 646:	a4 17       	cp	r26, r20
 648:	10 f0       	brcs	.+4      	; 0x64e <__utoa_common+0x14>
 64a:	a4 1b       	sub	r26, r20
 64c:	83 95       	inc	r24
 64e:	50 51       	subi	r21, 0x10	; 16
 650:	b9 f7       	brne	.-18     	; 0x640 <__utoa_common+0x6>
 652:	a0 5d       	subi	r26, 0xD0	; 208
 654:	aa 33       	cpi	r26, 0x3A	; 58
 656:	08 f0       	brcs	.+2      	; 0x65a <__utoa_common+0x20>
 658:	a9 5d       	subi	r26, 0xD9	; 217
 65a:	a1 93       	st	Z+, r26
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	79 f7       	brne	.-34     	; 0x63e <__utoa_common+0x4>
 660:	b1 11       	cpse	r27, r1
 662:	b1 93       	st	Z+, r27
 664:	11 92       	st	Z+, r1
 666:	cb 01       	movw	r24, r22
 668:	0c 94 36 03 	jmp	0x66c	; 0x66c <strrev>

0000066c <strrev>:
 66c:	dc 01       	movw	r26, r24
 66e:	fc 01       	movw	r30, r24
 670:	67 2f       	mov	r22, r23
 672:	71 91       	ld	r23, Z+
 674:	77 23       	and	r23, r23
 676:	e1 f7       	brne	.-8      	; 0x670 <strrev+0x4>
 678:	32 97       	sbiw	r30, 0x02	; 2
 67a:	04 c0       	rjmp	.+8      	; 0x684 <strrev+0x18>
 67c:	7c 91       	ld	r23, X
 67e:	6d 93       	st	X+, r22
 680:	70 83       	st	Z, r23
 682:	62 91       	ld	r22, -Z
 684:	ae 17       	cp	r26, r30
 686:	bf 07       	cpc	r27, r31
 688:	c8 f3       	brcs	.-14     	; 0x67c <strrev+0x10>
 68a:	08 95       	ret

0000068c <_exit>:
 68c:	f8 94       	cli

0000068e <__stop_program>:
 68e:	ff cf       	rjmp	.-2      	; 0x68e <__stop_program>
