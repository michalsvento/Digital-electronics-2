
06-lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00000676  0000070a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000676  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800170  00800170  0000077a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013fc  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009da  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f2  00000000  00000000  0000267a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  0000306c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  000032c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac5  00000000  00000000  00003800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000042c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 37       	cpi	r26, 0x70	; 112
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e7       	ldi	r26, 0x70	; 112
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 37       	cpi	r26, 0x77	; 119
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 39 03 	jmp	0x672	; 0x672 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
 * value on LCD display when 8-bit Timer/Counter2 overflows.
 */
int main(void)
{
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	00 e3       	ldi	r16, 0x30	; 48
 206:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 48; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 208:	89 91       	ld	r24, Y+
 20a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 48; i++)
 20e:	c0 17       	cp	r28, r16
 210:	d1 07       	cpc	r29, r17
 212:	d1 f7       	brne	.-12     	; 0x208 <main+0x14>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	
	
	

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("00:00.0");
 222:	87 e5       	ldi	r24, 0x57	; 87
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 	
	
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set prescaler and enable overflow interrupt every 16 ms
	
	TIM2_overflow_16ms();
 22a:	e1 eb       	ldi	r30, 0xB1	; 177
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	87 60       	ori	r24, 0x07	; 7
 232:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 234:	e0 e7       	ldi	r30, 0x70	; 112
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	80 83       	st	Z, r24
	
	// Configure 8-bit Timer/Counter1 for Stopwatch
	// Set prescaler and enable overflow interrupt every 1 s
	
	TIM1_overflow_262ms();
 23e:	e1 e8       	ldi	r30, 0x81	; 129
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	8b 7f       	andi	r24, 0xFB	; 251
 246:	80 83       	st	Z, r24
 248:	80 81       	ld	r24, Z
 24a:	83 60       	ori	r24, 0x03	; 3
 24c:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 24e:	ef e6       	ldi	r30, 0x6F	; 111
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	81 60       	ori	r24, 0x01	; 1
 256:	80 83       	st	Z, r24
	
	// Configure 8-bit Timer/Counter0 for Stopwatch
	// Set prescaler and enable overflow interrupt every 16 ms
	
	TIM0_overflow_4ms();
 258:	85 b5       	in	r24, 0x25	; 37
 25a:	8d 7f       	andi	r24, 0xFD	; 253
 25c:	85 bd       	out	0x25, r24	; 37
 25e:	85 b5       	in	r24, 0x25	; 37
 260:	85 60       	ori	r24, 0x05	; 5
 262:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 264:	ee e6       	ldi	r30, 0x6E	; 110
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	80 83       	st	Z, r24
	

    // Enables interrupts by setting the global interrupt mask
    sei();
 26e:	78 94       	sei
 270:	ff cf       	rjmp	.-2      	; 0x270 <main+0x7c>

00000272 <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	26 97       	sbiw	r28, 0x06	; 6
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	cd bf       	out	0x3d, r28	; 61
    static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;        // Tenths of a second
	static uint8_t secs = 0;        // Seconds
	static uint8_t minutes = 0;		// minutes  
	static uint16_t secsqr = 0;		// variable for square of seconds
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	90 e2       	ldi	r25, 0x20	; 32
 2a6:	9a 83       	std	Y+2, r25	; 0x02
 2a8:	89 83       	std	Y+1, r24	; 0x01
	char lcd_square[4]= "    ";
 2aa:	9c 83       	std	Y+4, r25	; 0x04
 2ac:	8b 83       	std	Y+3, r24	; 0x03
 2ae:	9e 83       	std	Y+6, r25	; 0x06
 2b0:	8d 83       	std	Y+5, r24	; 0x05

    number_of_overflows++;
 2b2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <number_of_overflows.1951>
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows >= 6)
 2b8:	86 30       	cpi	r24, 0x06	; 6
 2ba:	18 f4       	brcc	.+6      	; 0x2c2 <__vector_9+0x50>
	static uint8_t minutes = 0;		// minutes  
	static uint16_t secsqr = 0;		// variable for square of seconds
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
	char lcd_square[4]= "    ";

    number_of_overflows++;
 2bc:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <number_of_overflows.1951>
 2c0:	83 c0       	rjmp	.+262    	; 0x3c8 <__vector_9+0x156>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 2c2:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <number_of_overflows.1951>
		
		tens++;
 2c6:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <tens.1952>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
		if (tens> 9)
 2cc:	8a 30       	cpi	r24, 0x0A	; 10
 2ce:	18 f4       	brcc	.+6      	; 0x2d6 <__vector_9+0x64>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
		
		tens++;
 2d0:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <tens.1952>
 2d4:	16 c0       	rjmp	.+44     	; 0x302 <__vector_9+0x90>
		if (tens> 9)
		{
			tens=0;
 2d6:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <tens.1952>
			secs++;
 2da:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <secs.1953>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
			if (secs>59)
 2e0:	8c 33       	cpi	r24, 0x3C	; 60
 2e2:	18 f4       	brcc	.+6      	; 0x2ea <__vector_9+0x78>
		
		tens++;
		if (tens> 9)
		{
			tens=0;
			secs++;
 2e4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <secs.1953>
 2e8:	0c c0       	rjmp	.+24     	; 0x302 <__vector_9+0x90>
			if (secs>59)
			{
				secs=0;
 2ea:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <secs.1953>
				minutes++;
 2ee:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <minutes.1954>
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
				if (minutes>59)
 2f4:	8c 33       	cpi	r24, 0x3C	; 60
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <__vector_9+0x8c>
			tens=0;
			secs++;
			if (secs>59)
			{
				secs=0;
				minutes++;
 2f8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <minutes.1954>
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <__vector_9+0x90>
				if (minutes>59)
				{
					minutes=0;
 2fe:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <minutes.1954>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 302:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <tens.1952>
 306:	4a e0       	ldi	r20, 0x0A	; 10
 308:	be 01       	movw	r22, r28
 30a:	6f 5f       	subi	r22, 0xFF	; 255
 30c:	7f 4f       	sbci	r23, 0xFF	; 255
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 04 03 	call	0x608	; 0x608 <__itoa_ncheck>
		}
				
			

		itoa(tens, lcd_string,10);
		lcd_gotoxy(7,0);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	87 e0       	ldi	r24, 0x07	; 7
 318:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 31c:	ce 01       	movw	r24, r28
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 324:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <secs.1953>
 328:	4a e0       	ldi	r20, 0x0A	; 10
 32a:	be 01       	movw	r22, r28
 32c:	6f 5f       	subi	r22, 0xFF	; 255
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 04 03 	call	0x608	; 0x608 <__itoa_ncheck>
		
		
		itoa(secs, lcd_string,10);
		if(secs<10)
 336:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <secs.1953>
 33a:	8a 30       	cpi	r24, 0x0A	; 10
 33c:	28 f4       	brcc	.+10     	; 0x348 <__vector_9+0xd6>
		{
			lcd_gotoxy(5,0);
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	85 e0       	ldi	r24, 0x05	; 5
 342:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 346:	04 c0       	rjmp	.+8      	; 0x350 <__vector_9+0xde>
		}
		else
		{
			lcd_gotoxy(4,0);	
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		}
		lcd_puts(lcd_string);
 350:	ce 01       	movw	r24, r28
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 358:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <minutes.1954>
 35c:	4a e0       	ldi	r20, 0x0A	; 10
 35e:	be 01       	movw	r22, r28
 360:	6f 5f       	subi	r22, 0xFF	; 255
 362:	7f 4f       	sbci	r23, 0xFF	; 255
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 04 03 	call	0x608	; 0x608 <__itoa_ncheck>
		
		
		itoa(minutes, lcd_string,10);
		if(minutes<10)
 36a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <minutes.1954>
 36e:	8a 30       	cpi	r24, 0x0A	; 10
 370:	28 f4       	brcc	.+10     	; 0x37c <__vector_9+0x10a>
		{
			lcd_gotoxy(2,0);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 37a:	04 c0       	rjmp	.+8      	; 0x384 <__vector_9+0x112>
		}
		else
		{
			lcd_gotoxy(1,0);
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		}
		lcd_puts(lcd_string);
 384:	ce 01       	movw	r24, r28
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			
		
		secsqr = secs*secs;
 38c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <secs.1953>
		if (secs==0)				// for reset on the positions 12-14
 390:	81 11       	cpse	r24, r1
 392:	09 c0       	rjmp	.+18     	; 0x3a6 <__vector_9+0x134>
		{
			lcd_gotoxy(11,0);	
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	8b e0       	ldi	r24, 0x0B	; 11
 398:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts("0   ");
 39c:	8f e5       	ldi	r24, 0x5F	; 95
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 3a4:	11 c0       	rjmp	.+34     	; 0x3c8 <__vector_9+0x156>
 3a6:	4a e0       	ldi	r20, 0x0A	; 10
 3a8:	be 01       	movw	r22, r28
 3aa:	6d 5f       	subi	r22, 0xFD	; 253
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	88 9f       	mul	r24, r24
 3b0:	c0 01       	movw	r24, r0
 3b2:	11 24       	eor	r1, r1
 3b4:	0e 94 04 03 	call	0x608	; 0x608 <__itoa_ncheck>
		}
		else
		{
			itoa(secsqr,lcd_square,10);
			lcd_gotoxy(11,0);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	8b e0       	ldi	r24, 0x0B	; 11
 3bc:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(lcd_square);
 3c0:	ce 01       	movw	r24, r28
 3c2:	03 96       	adiw	r24, 0x03	; 3
 3c4:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		}

		

    }
}
 3c8:	26 96       	adiw	r28, 0x06	; 6
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	f8 94       	cli
 3ce:	de bf       	out	0x3e, r29	; 62
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	cd bf       	out	0x3d, r28	; 61
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Move one letter left every
 * 1 s.
 */
ISR(TIMER1_OVF_vect)
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	a5 97       	sbiw	r28, 0x25	; 37
 426:	de bf       	out	0x3e, r29	; 62
 428:	cd bf       	out	0x3d, r28	; 61
	static uint8_t i=0;
	uint8_t running_text[32]= "    I like Digital electronics! ";
 42a:	80 e2       	ldi	r24, 0x20	; 32
 42c:	e0 e3       	ldi	r30, 0x30	; 48
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	de 01       	movw	r26, r28
 432:	11 96       	adiw	r26, 0x01	; 1
 434:	01 90       	ld	r0, Z+
 436:	0d 92       	st	X+, r0
 438:	8a 95       	dec	r24
 43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	char lcd_shown[5]= "     ";
 43c:	85 e0       	ldi	r24, 0x05	; 5
 43e:	e1 e5       	ldi	r30, 0x51	; 81
 440:	f1 e0       	ldi	r31, 0x01	; 1
 442:	de 01       	movw	r26, r28
 444:	91 96       	adiw	r26, 0x21	; 33
 446:	01 90       	ld	r0, Z+
 448:	0d 92       	st	X+, r0
 44a:	8a 95       	dec	r24
 44c:	e1 f7       	brne	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	lcd_gotoxy(11,1);
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	8b e0       	ldi	r24, 0x0B	; 11
 452:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	
	if(i< (sizeof(running_text)-4))
 456:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <i.1963>
 45a:	8c 31       	cpi	r24, 0x1C	; 28
 45c:	18 f5       	brcc	.+70     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
	{
		lcd_shown[0] = running_text[i];
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	fe 01       	movw	r30, r28
 462:	e8 0f       	add	r30, r24
 464:	f9 1f       	adc	r31, r25
 466:	21 81       	ldd	r18, Z+1	; 0x01
 468:	29 a3       	std	Y+33, r18	; 0x21
		lcd_shown[1] = running_text[i+1];
 46a:	fe 01       	movw	r30, r28
 46c:	e8 0f       	add	r30, r24
 46e:	f9 1f       	adc	r31, r25
 470:	22 81       	ldd	r18, Z+2	; 0x02
 472:	2a a3       	std	Y+34, r18	; 0x22
		lcd_shown[2] = running_text[i+2];
 474:	fe 01       	movw	r30, r28
 476:	e8 0f       	add	r30, r24
 478:	f9 1f       	adc	r31, r25
 47a:	23 81       	ldd	r18, Z+3	; 0x03
 47c:	2b a3       	std	Y+35, r18	; 0x23
		lcd_shown[3] = running_text[i+3];
 47e:	fe 01       	movw	r30, r28
 480:	e8 0f       	add	r30, r24
 482:	f9 1f       	adc	r31, r25
 484:	24 81       	ldd	r18, Z+4	; 0x04
 486:	2c a3       	std	Y+36, r18	; 0x24
		lcd_shown[4] = running_text[i+4];
 488:	fe 01       	movw	r30, r28
 48a:	e8 0f       	add	r30, r24
 48c:	f9 1f       	adc	r31, r25
 48e:	85 81       	ldd	r24, Z+5	; 0x05
 490:	8d a3       	std	Y+37, r24	; 0x25
		lcd_puts(lcd_shown);
 492:	ce 01       	movw	r24, r28
 494:	81 96       	adiw	r24, 0x21	; 33
 496:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		i++;
 49a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <i.1963>
 49e:	8f 5f       	subi	r24, 0xFF	; 255
 4a0:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <i.1963>
	}

	if(i==(sizeof(running_text)-1))
 4a4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <i.1963>
 4a8:	8f 31       	cpi	r24, 0x1F	; 31
 4aa:	71 f4       	brne	.+28     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
	{
		lcd_shown[0] = running_text[i];
 4ac:	88 a1       	ldd	r24, Y+32	; 0x20
 4ae:	89 a3       	std	Y+33, r24	; 0x21
		lcd_shown[1] = running_text[0];
 4b0:	80 e2       	ldi	r24, 0x20	; 32
 4b2:	8a a3       	std	Y+34, r24	; 0x22
		lcd_shown[2] = running_text[1];
 4b4:	8b a3       	std	Y+35, r24	; 0x23
		lcd_shown[3] = running_text[2];
 4b6:	8c a3       	std	Y+36, r24	; 0x24
		lcd_shown[4] = running_text[3];
 4b8:	8d a3       	std	Y+37, r24	; 0x25
		lcd_puts(lcd_shown);
 4ba:	ce 01       	movw	r24, r28
 4bc:	81 96       	adiw	r24, 0x21	; 33
 4be:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		i=0;
 4c2:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <i.1963>
 4c6:	29 c0       	rjmp	.+82     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
	}

	if(i==(sizeof(running_text)-2))
 4c8:	8e 31       	cpi	r24, 0x1E	; 30
 4ca:	89 f4       	brne	.+34     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
	{
		lcd_shown[0] = running_text[i];
 4cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
 4ce:	89 a3       	std	Y+33, r24	; 0x21
		lcd_shown[1] = running_text[i+1];
 4d0:	88 a1       	ldd	r24, Y+32	; 0x20
 4d2:	8a a3       	std	Y+34, r24	; 0x22
		lcd_shown[2] = running_text[0];
 4d4:	80 e2       	ldi	r24, 0x20	; 32
 4d6:	8b a3       	std	Y+35, r24	; 0x23
		lcd_shown[3] = running_text[1];
 4d8:	8c a3       	std	Y+36, r24	; 0x24
		lcd_shown[4] = running_text[2];
 4da:	8d a3       	std	Y+37, r24	; 0x25
		lcd_puts(lcd_shown);
 4dc:	ce 01       	movw	r24, r28
 4de:	81 96       	adiw	r24, 0x21	; 33
 4e0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		i++;
 4e4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <i.1963>
 4e8:	8f 5f       	subi	r24, 0xFF	; 255
 4ea:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <i.1963>
		}
	if(i==(sizeof(running_text)-3))
 4ee:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <i.1963>
 4f2:	8d 31       	cpi	r24, 0x1D	; 29
 4f4:	91 f4       	brne	.+36     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
	{
		lcd_shown[0] = running_text[i];
 4f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
 4f8:	89 a3       	std	Y+33, r24	; 0x21
		lcd_shown[1] = running_text[i+1];
 4fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
 4fc:	8a a3       	std	Y+34, r24	; 0x22
		lcd_shown[2] = running_text[i+2];
 4fe:	88 a1       	ldd	r24, Y+32	; 0x20
 500:	8b a3       	std	Y+35, r24	; 0x23
		lcd_shown[3] = running_text[0];
 502:	80 e2       	ldi	r24, 0x20	; 32
 504:	8c a3       	std	Y+36, r24	; 0x24
		lcd_shown[4] = running_text[1];
 506:	8d a3       	std	Y+37, r24	; 0x25
		lcd_puts(lcd_shown);
 508:	ce 01       	movw	r24, r28
 50a:	81 96       	adiw	r24, 0x21	; 33
 50c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		i++;
 510:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <i.1963>
 514:	8f 5f       	subi	r24, 0xFF	; 255
 516:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <i.1963>
	}
	if(i==(sizeof(running_text)-4))
 51a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <i.1963>
 51e:	8c 31       	cpi	r24, 0x1C	; 28
 520:	99 f4       	brne	.+38     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	{
		lcd_shown[0] = running_text[i];
 522:	8d 8d       	ldd	r24, Y+29	; 0x1d
 524:	89 a3       	std	Y+33, r24	; 0x21
		lcd_shown[1] = running_text[i+1];
 526:	8e 8d       	ldd	r24, Y+30	; 0x1e
 528:	8a a3       	std	Y+34, r24	; 0x22
		lcd_shown[2] = running_text[i+2];
 52a:	8f 8d       	ldd	r24, Y+31	; 0x1f
 52c:	8b a3       	std	Y+35, r24	; 0x23
		lcd_shown[3] = running_text[i+3];
 52e:	88 a1       	ldd	r24, Y+32	; 0x20
 530:	8c a3       	std	Y+36, r24	; 0x24
		lcd_shown[4] = running_text[0];
 532:	80 e2       	ldi	r24, 0x20	; 32
 534:	8d a3       	std	Y+37, r24	; 0x25
		lcd_puts(lcd_shown);
 536:	ce 01       	movw	r24, r28
 538:	81 96       	adiw	r24, 0x21	; 33
 53a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		i++;
 53e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <i.1963>
 542:	8f 5f       	subi	r24, 0xFF	; 255
 544:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <i.1963>
		}
	

}
 548:	a5 96       	adiw	r28, 0x25	; 37
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_16>:
 * when lcd_gotoxy(10,1) & symbol 0x05 is reached
 */


ISR(TIMER0_OVF_vect)
{	
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	ef 93       	push	r30
 59a:	ff 93       	push	r31
	static uint8_t symbol = 0;
	static uint8_t position = 0;
	
	
	lcd_gotoxy(1 + position, 1);
 59c:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <position.1972>
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	8f 5f       	subi	r24, 0xFF	; 255
 5a4:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(symbol);
 5a8:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
 5ac:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>

	symbol++;
 5b0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
 5b4:	8f 5f       	subi	r24, 0xFF	; 255
	if(symbol>5)
 5b6:	86 30       	cpi	r24, 0x06	; 6
 5b8:	18 f4       	brcc	.+6      	; 0x5c0 <__vector_16+0x46>
	
	
	lcd_gotoxy(1 + position, 1);
	lcd_putc(symbol);

	symbol++;
 5ba:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <__data_end>
 5be:	13 c0       	rjmp	.+38     	; 0x5e6 <__vector_16+0x6c>
	if(symbol>5)
	{
		symbol=0;
 5c0:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <__data_end>
		position++;
 5c4:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <position.1972>
 5c8:	8f 5f       	subi	r24, 0xFF	; 255
 5ca:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <position.1972>
		
		if (position>9)
 5ce:	8a 30       	cpi	r24, 0x0A	; 10
 5d0:	50 f0       	brcs	.+20     	; 0x5e6 <__vector_16+0x6c>
		{
			lcd_gotoxy(1,1);
 5d2:	61 e0       	ldi	r22, 0x01	; 1
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts("          ");			// 10 spaces for reset
 5da:	84 e6       	ldi	r24, 0x64	; 100
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			position=0;
 5e2:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <position.1972>
		}
	}
	
}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <__itoa_ncheck>:
 608:	bb 27       	eor	r27, r27
 60a:	4a 30       	cpi	r20, 0x0A	; 10
 60c:	31 f4       	brne	.+12     	; 0x61a <__itoa_ncheck+0x12>
 60e:	99 23       	and	r25, r25
 610:	22 f4       	brpl	.+8      	; 0x61a <__itoa_ncheck+0x12>
 612:	bd e2       	ldi	r27, 0x2D	; 45
 614:	90 95       	com	r25
 616:	81 95       	neg	r24
 618:	9f 4f       	sbci	r25, 0xFF	; 255
 61a:	0c 94 10 03 	jmp	0x620	; 0x620 <__utoa_common>

0000061e <__utoa_ncheck>:
 61e:	bb 27       	eor	r27, r27

00000620 <__utoa_common>:
 620:	fb 01       	movw	r30, r22
 622:	55 27       	eor	r21, r21
 624:	aa 27       	eor	r26, r26
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	aa 1f       	adc	r26, r26
 62c:	a4 17       	cp	r26, r20
 62e:	10 f0       	brcs	.+4      	; 0x634 <__utoa_common+0x14>
 630:	a4 1b       	sub	r26, r20
 632:	83 95       	inc	r24
 634:	50 51       	subi	r21, 0x10	; 16
 636:	b9 f7       	brne	.-18     	; 0x626 <__utoa_common+0x6>
 638:	a0 5d       	subi	r26, 0xD0	; 208
 63a:	aa 33       	cpi	r26, 0x3A	; 58
 63c:	08 f0       	brcs	.+2      	; 0x640 <__utoa_common+0x20>
 63e:	a9 5d       	subi	r26, 0xD9	; 217
 640:	a1 93       	st	Z+, r26
 642:	00 97       	sbiw	r24, 0x00	; 0
 644:	79 f7       	brne	.-34     	; 0x624 <__utoa_common+0x4>
 646:	b1 11       	cpse	r27, r1
 648:	b1 93       	st	Z+, r27
 64a:	11 92       	st	Z+, r1
 64c:	cb 01       	movw	r24, r22
 64e:	0c 94 29 03 	jmp	0x652	; 0x652 <strrev>

00000652 <strrev>:
 652:	dc 01       	movw	r26, r24
 654:	fc 01       	movw	r30, r24
 656:	67 2f       	mov	r22, r23
 658:	71 91       	ld	r23, Z+
 65a:	77 23       	and	r23, r23
 65c:	e1 f7       	brne	.-8      	; 0x656 <strrev+0x4>
 65e:	32 97       	sbiw	r30, 0x02	; 2
 660:	04 c0       	rjmp	.+8      	; 0x66a <strrev+0x18>
 662:	7c 91       	ld	r23, X
 664:	6d 93       	st	X+, r22
 666:	70 83       	st	Z, r23
 668:	62 91       	ld	r22, -Z
 66a:	ae 17       	cp	r26, r30
 66c:	bf 07       	cpc	r27, r31
 66e:	c8 f3       	brcs	.-14     	; 0x662 <strrev+0x10>
 670:	08 95       	ret

00000672 <_exit>:
 672:	f8 94       	cli

00000674 <__stop_program>:
 674:	ff cf       	rjmp	.-2      	; 0x674 <__stop_program>
